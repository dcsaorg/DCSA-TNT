{
	"info": {
		"_postman_id": "af1a1b02-9f57-4290-a91c-e27b512515a2",
		"name": "DCSA-TNT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup Test Data",
			"item": [
				{
					"name": "Load Test Data",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"metadata\": {\n            \"eventID\": \"41533e39-df30-45c8-8035-127c92f93f8f\",\n            \"eventCreatedDateTime\": \"2003-05-01T00:00:00Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2003-05-03T00:00:00Z\",\n            \"eventClassifierCode\": \"EST\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"transportEventTypeCode\": \"DEPA\",\n            \"delayReasonCode\": \"ANA\",\n            \"changeRemark\": \"Authorities not available\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-B\",\n                \"carrierServiceCode\": \"TNT1\",\n                \"universalServiceReference\": \"SR00033F\",\n                \"carrierExportVoyageNumber\": \"TNT1E\",\n                \"carrierImportVoyageNumber\": \"TNT1E\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\" : \"GEOL\",\n                    \"latitude\": \"48.8585500\",\n                    \"longitude\": \"2.294492036\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"9321483\",\n                    \"name\": \"Emma Maersk\",\n                    \"flag\": \"DK\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"3065fd6c-f63e-4bcd-b028-937a640db5ba\",\n            \"eventCreatedDateTime\": \"2003-05-03T00:00:00Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2003-05-03T00:00:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"transportEventTypeCode\": \"DEPA\",\n            \"delayReasonCode\": \"ANA\",\n            \"changeRemark\": \"Authorities not available\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-B\",\n                \"carrierServiceCode\": \"TNT1\",\n                \"universalServiceReference\": \"SR00033F\",\n                \"carrierExportVoyageNumber\": \"TNT1E\",\n                \"carrierImportVoyageNumber\": \"TNT1E\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\" : \"UNLO\",\n                    \"UNLocationCode\": \"USNYC\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"9321483\",\n                    \"name\": \"Emma Maersk\",\n                    \"flag\": \"DK\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"0210bf51-3d8b-4c7e-8ef9-d143b401ad2f\",\n            \"eventCreatedDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_4\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"RECE\",\n            \"documentTypeCode\": \"SHI\",\n            \"documentReference\": \"SI_REF_4\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"97eb7c09-571e-438f-8f65-ac6a29ba04e5\",\n            \"eventCreatedDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"cbrr-b83765166707812c8ff4\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"RECE\",\n            \"documentTypeCode\": \"CBR\",\n            \"documentReference\": \"cbrr-b83765166707812c8ff4\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"d7dde15f-5ddc-42ce-8103-9fa1c4da0bde\",\n            \"eventCreatedDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"cbr-b83765166707812c8ff4\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"RECE\",\n            \"documentTypeCode\": \"BKG\",\n            \"documentReference\": \"cbr-b83765166707812c8ff4\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"8b654176-fe41-41fd-a457-a632d6811246\",\n            \"eventCreatedDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-01-08T13:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"c144c6dff46b9fa67e65\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"RECE\",\n            \"documentTypeCode\": \"SHI\",\n            \"documentReference\": \"c144c6dff46b9fa67e65\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"576731c5-1aca-4e05-a279-bae1350b7961\",\n            \"eventCreatedDateTime\": \"2021-01-08T17:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-01-08T17:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_4\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"PENU\",\n            \"documentTypeCode\": \"SHI\",\n            \"documentReference\": \"SI_REF_4\",\n            \"reason\": \"Carrier Booking Reference present in both shipping instruction as well as cargo items.\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"037bb03d-1310-4011-bc9b-3956b1e166bd\",\n            \"eventCreatedDateTime\": \"2021-01-08T18:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-01-08T18:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_4\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"DRFT\",\n            \"documentTypeCode\": \"SHI\",\n            \"documentReference\": \"SI_REF_4\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"84db923d-2a19-4eb0-beb5-446c1ec17d34\",\n            \"eventCreatedDateTime\": \"2021-01-09T13:12:56Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2019-11-11T23:11:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"transportEventTypeCode\": \"ARRI\",\n            \"delayReasonCode\": \"WEA\",\n            \"changeRemark\": \"Bad weather\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-A\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\" : \"GEOL\",\n                    \"latitude\": \"48.8585500\",\n                    \"longitude\": \"2.294492036\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"1234567\",\n                    \"name\": \"King of the Seas\",\n                    \"flag\": \"DE\",\n                    \"callSign\": \"NCVV\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"2c645424-a125-4431-9dc4-5aff488173b7\",\n            \"eventCreatedDateTime\": \"2021-01-09T13:12:56Z\",\n            \"eventType\": \"EQUIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2019-11-11T23:11:00Z\",\n            \"eventClassifierCode\": \"EST\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"equipmentEventTypeCode\": \"LOAD\",\n            \"equipmentReference\": \"APZU4812090\",\n            \"emptyIndicatorCode\": \"EMPTY\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-A\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\":\"UNLO\",\n                    \"UNLocationCode\": \"USNYC\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"1234567\",\n                    \"name\": \"King of the Seas\",\n                    \"flag\": \"DE\",\n                    \"callSign\": \"NCVV\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            },\n            \"isoequipmentCode\": \"22G2\",\n            \"isTransshipmentMove\": false\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"2968b966-ee81-46ba-af87-0c5031c641f4\",\n            \"eventCreatedDateTime\": \"2021-11-28T13:12:56Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-11-30T23:11:00Z\",\n            \"eventClassifierCode\": \"PLN\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"a3a34f10-acc5-4e23-b52e-146f63458c90\"\n                },\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"ef223019-ff16-4870-be69-9dbaaaae9b11\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"C501576CD94F\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"DCR987876762\"\n                }\n            ],\n            \"transportEventTypeCode\": \"ARRI\",\n            \"delayReasonCode\": \"WEA\",\n            \"changeRemark\": \"Bad weather\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_04-A\",\n                \"carrierExportVoyageNumber\": \"2107E\",\n                \"carrierImportVoyageNumber\": \"2106W\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Hamburg\",\n                    \"locationType\" : \"FACI\",\n                    \"UNLocationCode\": \"DEHAM\",\n                    \"facilityCode\": \"DPWJA\",\n                    \"facilityCodeListProvider\": \"SMDG\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"9321483\",\n                    \"name\": \"Emma Maersk\",\n                    \"flag\": \"DK\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"2968b966-ee81-46ba-af87-0c5031c641f3\",\n            \"eventCreatedDateTime\": \"2021-11-28T13:12:56Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-11-30T23:11:00Z\",\n            \"eventClassifierCode\": \"PLN\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_01\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"AR1239719871\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"BR1239719871\"\n                },\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_2\"\n                },\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_7\"\n                },\n                {\n                    \"type\": \"TRD\",\n                    \"value\": \"9b02401c-b2fb-5009\"\n                }\n            ],\n            \"references\": [\n                {\n                    \"type\": \"CR\",\n                    \"value\": \"AB-123743CR\"\n                },\n                {\n                    \"type\": \"PO\",\n                    \"value\": \"PO0027\"\n                }\n            ],\n            \"transportEventTypeCode\": \"DEPA\",\n            \"delayReasonCode\": \"WEA\",\n            \"changeRemark\": \"Bad weather\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_01-C\",\n                \"carrierExportVoyageNumber\": \"2419E\",\n                \"carrierImportVoyageNumber\": \"2418W\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"RAIL\",\n                \"location\": {\n                    \"locationName\": \"Genneb\",\n                    \"locationType\" : \"UNLO\",\n                    \"UNLocationCode\": \"USMIA\"\n                },\n                \"facilityTypeCode\": \"COFS\"\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"2968b966-ee81-46ba-af87-0c5031c641f2\",\n            \"eventCreatedDateTime\": \"2021-11-28T13:12:56Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-11-30T23:11:00Z\",\n            \"eventClassifierCode\": \"PLN\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_01\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"AR1239719871\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"BR1239719871\"\n                },\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_2\"\n                },\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_7\"\n                },\n                {\n                    \"type\": \"TRD\",\n                    \"value\": \"9b02401c-b2fb-5009\"\n                }\n            ],\n            \"references\": [\n                {\n                    \"type\": \"CR\",\n                    \"value\": \"AB-123743CR\"\n                },\n                {\n                    \"type\": \"PO\",\n                    \"value\": \"PO0027\"\n                }\n            ],\n            \"transportEventTypeCode\": \"ARRI\",\n            \"delayReasonCode\": \"WEA\",\n            \"changeRemark\": \"Bad weather\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_01-D\",\n                \"carrierExportVoyageNumber\": \"3419E\",\n                \"carrierImportVoyageNumber\": \"3418W\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"RAIL\",\n                \"location\": {\n                    \"locationName\": \"Nijmegen\",\n                    \"locationType\": \"UNLO\",\n                    \"UNLocationCode\": \"USMIA\"\n                },\n                \"facilityTypeCode\": \"INTE\"\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"2968b966-ee81-46ba-af87-0c5031c64142\",\n            \"eventCreatedDateTime\": \"2021-11-28T13:12:56Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-11-30T23:11:00Z\",\n            \"eventClassifierCode\": \"PLN\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"transportEventTypeCode\": \"DEPA\",\n            \"delayReasonCode\": \"WEA\",\n            \"changeRemark\": \"Bad weather\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-A\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\": \"GEOL\",\n                    \"latitude\": \"48.8585500\",\n                    \"longitude\": \"2.294492036\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"1234567\",\n                    \"name\": \"King of the Seas\",\n                    \"flag\": \"DE\",\n                    \"callSign\": \"NCVV\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"9d5d0824-b228-4ea8-b2cb-4ebd8da76e15\",\n            \"eventCreatedDateTime\": \"2021-11-29T13:12:56Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-12-02T23:11:00Z\",\n            \"eventClassifierCode\": \"PLN\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"a3a34f10-acc5-4e23-b52e-146f63458c90\"\n                },\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"ef223019-ff16-4870-be69-9dbaaaae9b11\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"C501576CD94F\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"DCR987876762\"\n                }\n            ],\n            \"transportEventTypeCode\": \"DEPA\",\n            \"delayReasonCode\": \"WEA\",\n            \"changeRemark\": \"Bad weather\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_04-B\",\n                \"carrierExportVoyageNumber\": \"2107E\",\n                \"carrierImportVoyageNumber\": \"2106W\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Lagkagehuset Islands Brygge\",\n                    \"locationType\" : \"ADDR\",\n                    \"address\": {\n                        \"name\": \"Lagkagehuset\",\n                        \"street\": \"Islands Brygge\",\n                        \"streetNumber\": \"43\",\n                        \"floor\": \"St\",\n                        \"postCode\": \"2300\",\n                        \"city\": \"København S\",\n                        \"stateRegion\": \"N/A\",\n                        \"country\": \"Denmark\"\n                    }\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"9321483\",\n                    \"name\": \"Emma Maersk\",\n                    \"flag\": \"DK\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"bad67dfa-a866-46bb-8889-b71c77d0f405\",\n            \"eventCreatedDateTime\": \"2021-11-30T23:11:00Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2021-11-28T13:12:56Z\",\n            \"eventClassifierCode\": \"PLN\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"transportEventTypeCode\": \"ARRI\",\n            \"delayReasonCode\": \"ANA\",\n            \"changeRemark\": \"Authorities not available\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-B\",\n                \"carrierServiceCode\": \"TNT1\",\n                \"universalServiceReference\": \"SR00033F\",\n                \"universalExportVoyageReference\": \"SR00034F\",\n                \"universalImportVoyageReference\": \"SR00035F\",\n                \"carrierExportVoyageNumber\": \"TNT1E\",\n                \"carrierImportVoyageNumber\": \"TNT1E\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\": \"UNLO\",\n                    \"UNLocationCode\": \"USNYC\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"9321483\",\n                    \"name\": \"Emma Maersk\",\n                    \"flag\": \"DK\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"e73a828b-d6ed-4d78-9a25-ca60c62a72ec\",\n            \"eventCreatedDateTime\": \"2022-03-01T18:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2022-03-01T18:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_6\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"RECE\",\n            \"documentTypeCode\": \"SHI\",\n            \"documentReference\": \"SI_REF_6\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"5d1c56f2-d851-4bc5-9c2a-fe794080001a\",\n            \"eventCreatedDateTime\": \"2022-03-03T18:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2022-03-03T18:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"TRD\",\n                    \"value\": \"2b02401c-b2fb-5009\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"DRFT\",\n            \"documentTypeCode\": \"TRD\",\n            \"documentReference\": \"2b02401c-b2fb-5009\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"e17ab008-2286-46d9-8eb6-3607a5bacfe5\",\n            \"eventCreatedDateTime\": \"2022-03-03T18:22:53Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2022-03-03T18:22:53Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"SHI\",\n                    \"value\": \"SI_REF_6\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"DRFT\",\n            \"documentTypeCode\": \"SHI\",\n            \"documentReference\": \"SI_REF_6\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"179919ae-1e90-41a8-be0d-baa7b9264035\",\n            \"eventCreatedDateTime\": \"2022-03-05T13:56:12Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2022-03-05T13:56:12Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"TRD\",\n                    \"value\": \"2b02401c-b2fb-5009\"\n                }\n            ],\n            \"shipmentEventTypeCode\": \"APPR\",\n            \"documentTypeCode\": \"TRD\",\n            \"documentReference\": \"2b02401c-b2fb-5009\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"5e51e72c-d872-11ea-811c-0f8f10a32ea2\",\n            \"eventCreatedDateTime\": \"2023-04-18T05:56:23.871884Z\",\n            \"eventType\": \"EQUIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2003-05-03T00:00:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"equipmentEventTypeCode\": \"LOAD\",\n            \"equipmentReference\": \"equipref3453\",\n            \"emptyIndicatorCode\": \"EMPTY\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-A\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\": \"GEOL\",\n                    \"latitude\": \"48.8585500\",\n                    \"longitude\": \"2.294492036\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"1234567\",\n                    \"name\": \"King of the Seas\",\n                    \"flag\": \"DE\",\n                    \"callSign\": \"NCVV\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            },\n            \"isoequipmentCode\": \"22G2\",\n            \"isTransshipmentMove\": false\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"5e51e72c-d872-11ea-811c-0f8f10a32ea1\",\n            \"eventCreatedDateTime\": \"2023-04-18T05:56:23.871884Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2003-05-03T00:00:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"shipmentEventTypeCode\": \"CONF\",\n            \"documentTypeCode\": \"BKG\",\n            \"documentReference\": \"ABC123123123\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"e48f2bc0-c746-11ea-a3ff-db48243a89f4\",\n            \"eventCreatedDateTime\": \"2023-04-18T05:56:23.871884Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2020-07-15T00:00:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"shipmentEventTypeCode\": \"APPR\",\n            \"documentTypeCode\": \"BKG\",\n            \"documentReference\": \"BR1239719971\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"784871e7-c9cd-4f59-8d88-2e033fa799a1\",\n            \"eventCreatedDateTime\": \"2023-04-18T05:56:23.871884Z\",\n            \"eventType\": \"SHIPMENT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2020-07-15T00:00:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"shipmentEventTypeCode\": \"APPR\",\n            \"documentTypeCode\": \"BKG\",\n            \"documentReference\": \"BR1239719971\"\n        }\n    },\n    {\n        \"metadata\": {\n            \"eventID\": \"5e51e72c-d872-11ea-811c-0f8f10a32ea3\",\n            \"eventCreatedDateTime\": \"2023-04-18T05:56:23.871884Z\",\n            \"eventType\": \"TRANSPORT\"\n        },\n        \"payload\": {\n            \"eventDateTime\": \"2003-05-03T00:00:00Z\",\n            \"eventClassifierCode\": \"ACT\",\n            \"relatedDocumentReferences\": [\n                {\n                    \"type\": \"CBR\",\n                    \"value\": \"CARRIER_BOOKING_REQUEST_REFERENCE_02\"\n                },\n                {\n                    \"type\": \"BKG\",\n                    \"value\": \"ABC123123123\"\n                }\n            ],\n            \"transportEventTypeCode\": \"DEPA\",\n            \"delayReasonCode\": \"ANA\",\n            \"changeRemark\": \"Authorities not available\",\n            \"transportCall\": {\n                \"transportCallReference\": \"TC-REF-08_02-A\",\n                \"transportCallSequenceNumber\": 1,\n                \"modeOfTransport\": \"VESSEL\",\n                \"location\": {\n                    \"locationName\": \"Eiffel Tower\",\n                    \"locationType\": \"UNLO\",\n                    \"UNLocationCode\": \"USNYC\"\n                },\n                \"facilityTypeCode\": \"POTE\",\n                \"vessel\": {\n                    \"vesselIMONumber\": \"1234567\",\n                    \"name\": \"King of the Seas\",\n                    \"flag\": \"DE\",\n                    \"callSign\": \"NCVV\",\n                    \"operatorCarrierCode\": \"MSK\",\n                    \"operatorCarrierCodeListProvider\": \"SMDG\"\n                }\n            }\n        }\n    }\n]\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/unofficial/events/",
							"host": [
								"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
							],
							"path": [
								"unofficial",
								"events",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET events",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "GET All Events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-empty response\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    // The positive test cases will have created at least 10 events at this point.\r",
											"    pm.expect(jsonData.length).to.gt(10);\r",
											"});\r",
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Shipment events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema); \r",
											"const SHIPMENT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[0];\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) =>\r",
											"  pm.expect(item.payload).to.have.jsonSchema(SHIPMENT_EVENT_PAYLOAD_SCHEMA)\r",
											"  );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?eventType=SHIPMENT",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "eventType",
											"value": "SHIPMENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Equipment events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"const EQUIPMENT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[1];\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) =>\r",
											"pm.expect(item.payload).to.have.jsonSchema(EQUIPMENT_EVENT_PAYLOAD_SCHEMA)\r",
											"  );\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?eventType=EQUIPMENT",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "eventType",
											"value": "EQUIPMENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Transport events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"const TRANSPORT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[2];\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) =>\r",
											"pm.expect(item.payload).to.have.jsonSchema(TRANSPORT_EVENT_PAYLOAD_SCHEMA)\r",
											"  );\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?eventType=TRANSPORT",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "eventType",
											"value": "TRANSPORT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By shipmentEventTypeCode RECE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_SHIPMENT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) =>{\r",
											"pm.expect(item.payload).to.have.jsonSchema(schemaObject);\r",
											"pm.expect(item.payload.shipmentEventTypeCode).to.equal(\"RECE\");\r",
											" } );\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?shipmentEventTypeCode=RECE",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "shipmentEventTypeCode",
											"value": "RECE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By DocumentReferenceCBR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});\r",
											"\r",
											"pm.test(\"All requests match query parameters DocumentReference\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) =>{\r",
											"  const dr = item.payload.relatedDocumentReferences.map\r",
											"      (dr => dr.value);\r",
											"       pm.expect(dr).to.include(\"cbr-b83765166707812c8ff4\");\r",
											" } );\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?documentReference=cbr-b83765166707812c8ff4",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "documentReference",
											"value": "cbr-b83765166707812c8ff4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By TransportEventTypeCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_TRANSPORT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"pm.expect(item.payload).to.have.jsonSchema(schemaObject)\r",
											"  pm.expect(item.payload.transportEventTypeCode).to.equal(\"DEPA\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?transportEventTypeCode=DEPA",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "transportEventTypeCode",
											"value": "DEPA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By TransportCallReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_ONE_OF_TRANPORT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload).to.have.jsonSchema(schemaObject);\r",
											"      pm.expect(item.payload.transportCall.transportCallReference).to.equal(\"TC-REF-08_02-A\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?transportCallReference=TC-REF-08_02-A",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "transportCallReference",
											"value": "TC-REF-08_02-A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By vesselIMONumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_ONE_OF_TRANPORT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload).to.have.jsonSchema(schemaObject);\r",
											"      pm.expect(item.payload.transportCall.vessel.vesselIMONumber).to.equal(\"1234567\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?vesselIMONumber=1234567",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "vesselIMONumber",
											"value": "1234567"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By CarrierVoyageNumber TNT1E",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_ONE_OF_TRANPORT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload).to.have.jsonSchema(schemaObject);\r",
											"      pm.expect(item.payload.transportCall.carrierExportVoyageNumber).to.equal(\"TNT1E\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?carrierExportVoyageNumber=TNT1E",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "carrierExportVoyageNumber",
											"value": "TNT1E"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By CarrierVoyageNumber 3419E",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_ONE_OF_TRANPORT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload).to.have.jsonSchema(schemaObject);\r",
											"      pm.expect(item.payload.transportCall.carrierExportVoyageNumber).to.equal(\"3419E\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?carrierExportVoyageNumber=3419E",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "carrierExportVoyageNumber",
											"value": "3419E"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By CarrierServiceCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"    \r",
											"});\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload.transportCall.carrierServiceCode).to.equal(\"TNT1\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?carrierServiceCode=TNT1",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "carrierServiceCode",
											"value": "TNT1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By UniversalServiceReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"TNT_ONE_OF_TRANPORT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload).to.have.jsonSchema(schemaObject);\r",
											"      pm.expect(item.payload.transportCall.universalServiceReference).to.equal(\"SR00033F\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?universalServiceReference=SR00033F",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "universalServiceReference",
											"value": "SR00033F"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By EquipmentEventTypeCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"const EQUIPMENT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[1];\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) => {\r",
											"      pm.expect(item.payload).to.have.jsonSchema(EQUIPMENT_EVENT_PAYLOAD_SCHEMA);\r",
											"      pm.expect(item.payload.equipmentEventTypeCode).to.equal(\"LOAD\");\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?equipmentEventTypeCode=LOAD",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "equipmentEventTypeCode",
											"value": "LOAD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By EquipmentReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"const EQUIPMENT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[1];\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Requests match query parameter equipmentReference\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map(item => {\r",
											"  const presentInReferences = item.payload.references === null &&\r",
											"  item.payload.references.find( re => re.type == \"EQ\" && re.type == \"APZU4812090\");\r",
											"  if(pm.expect(item.payload).to.have.jsonSchema(EQUIPMENT_EVENT_PAYLOAD_SCHEMA) && !presentInReferences){\r",
											"  pm.expect(item.payload.equipmentReference).to.equal(\"APZU4812090\");\r",
											"  }\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?equipmentReference=APZU4812090",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "equipmentReference",
											"value": "APZU4812090"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BY TransportEventCombo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"const TRANSPORT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[2];\r",
											"\r",
											"pm.test(\"All requests match query parameters payload schema\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  jsonData.map((item) =>\r",
											"pm.expect(item.payload).to.have.jsonSchema(TRANSPORT_EVENT_PAYLOAD_SCHEMA)\r",
											"  );\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?eventType=TRANSPORT&transportCallID=123e4567-e89b-12d3-a456-426614174000&vesselIMONumber=9321483&carrierVoyageNumber=TNT1E",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "eventType",
											"value": "TRANSPORT"
										},
										{
											"key": "transportCallID",
											"value": "123e4567-e89b-12d3-a456-426614174000"
										},
										{
											"key": "vesselIMONumber",
											"value": "9321483"
										},
										{
											"key": "carrierVoyageNumber",
											"value": "TNT1E"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "By ImpossibleCombo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENTS_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"const TRANSPORT_EVENT_PAYLOAD_SCHEMA = schemaObject.items.properties.payload.oneOf[2];\r",
											"\r",
											"pm.test(\"Event list is empty \", () => {\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/events?shipmentEventTypeCode=RECE&equipmentReference=APZU4812090",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"events"
									],
									"query": [
										{
											"key": "shipmentEventTypeCode",
											"value": "RECE"
										},
										{
											"key": "equipmentReference",
											"value": "APZU4812090"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"TNT_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Post EventSubscription",
			"item": [
				{
					"name": "Test: create EventSubscriptionWithSecretTO and retrieve it",
					"item": [
						{
							"name": "create single EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"const parsedBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"SUBSCRIPTION_ID\", parsedBody.subscriptionID);\r",
											"\r",
											"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
											"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": \"test-docRef\",\r\n    \"equipmentReference\": \"test-equipRef\",\r\n    \"transportCallReference\": \"test-transportCallRef\",\r\n    \"vesselIMONumber\": \"1234567\",\r\n    \"carrierExportVoyageNumber\": \"test-carrierExportVoyageNumber\",\r\n    \"universalExportVoyageReference\": \"12AZN\",\r\n    \"carrierServiceCode\": \"csc34\",\r\n    \"universalServiceReference\": \"SR00001D\",\r\n    \"eventTypes\": [\r\n        \"EQUIPMENT\",\r\n        \"SHIPMENT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"RECE\",\r\n        \"APPR\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"ARN\",\r\n        \"CAS\",\r\n        \"BKG\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"DEPA\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"LOAD\",\r\n        \"DISC\"\r\n    ],\r\n    \"secret\": \"dmVyeSBzZWNyZXQgc2VjcmV0IHRoYXQgaXMgc28gc2VjcmV0\",\r\n    \"unlocationCode\": \"UNLoc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body SubscriptionID matches query parameter \", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.subscriptionID).to.eql(SUBSCRIPTION_ID);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches posted EventSubscriptionWithSecretTO\", () => {\r",
											"    const jsonData = JSON.sort(pm.response.json());\r",
											"    const postRequestBody = JSON.sort(JSON.parse(postRequestBodyRaw));\r",
											"\r",
											"     delete postRequestBody[\"secret\"];\r",
											"     delete jsonData[\"subscriptionID\"];\r",
											"\r",
											"\r",
											"    // For debugging:\r",
											"   console.log(JSON.stringify(jsonData));\r",
											"  console.log(JSON.stringify(postRequestBody));\r",
											"    pm.expect(jsonData).to.eql(postRequestBody);\r",
											"});\r",
											"pm.collectionVariables.unset(\"POST_BODY\");\r",
											"pm.collectionVariables.unset(\"SUBSCRIPTION_ID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test: create EventSubscriptionWithSecretTO and retrieve list",
					"item": [
						{
							"name": "create single EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"const parsedBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"SUBSCRIPTION_ID\", parsedBody.subscriptionID);\r",
											"\r",
											"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
											"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": \"test-docRef\",\r\n    \"equipmentReference\": \"test-equipRef\",\r\n    \"transportCallReference\": \"test-transportCallRef\",\r\n    \"vesselIMONumber\": \"1234567\",\r\n    \"carrierExportVoyageNumber\": \"test-carrierExportVoyageNumber\",\r\n    \"universalExportVoyageReference\": \"12AZN\",\r\n    \"carrierServiceCode\": \"csc34\",\r\n    \"universalServiceReference\": \"SR00001D\",\r\n    \"eventTypes\": [\r\n        \"EQUIPMENT\",\r\n        \"SHIPMENT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"RECE\",\r\n        \"APPR\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"ARN\",\r\n        \"CAS\",\r\n        \"BKG\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"DEPA\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"LOAD\",\r\n        \"DISC\"\r\n    ],\r\n    \"secret\": \"dmVyeSBzZWNyZXQgc2VjcmV0IHRoYXQgaXMgc28gc2VjcmV0\",\r\n    \"unlocationCode\": \"UNLoc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"      jsonData.map((item) =>{\r",
											"          pm.expect(item).to.have.jsonSchema(schemaObject);\r",
											"          });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"SUBSCRIPTION_ID exits in list of event subscriptions\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  console.log(jsonData);\r",
											"  const dr = jsonData.map(item => item.subscriptionID);\r",
											"    console.log(SUBSCRIPTION_ID);\r",
											"    console.log(dr);\r",
											"  pm.expect(dr).to.include(SUBSCRIPTION_ID);\r",
											"\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"POST_BODY\");\r",
											"pm.collectionVariables.unset(\"SUBSCRIPTION_ID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test: create ESWithSecretTO, update and retrieve it",
					"item": [
						{
							"name": "create single EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"const parsedBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"SUBSCRIPTION_ID\", parsedBody.subscriptionID);\r",
											"\r",
											"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
											"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": \"test-docRef\",\r\n    \"equipmentReference\": \"test-equipRef\",\r\n    \"transportCallReference\": \"test-transportCallRef\",\r\n    \"vesselIMONumber\": \"1234567\",\r\n    \"carrierExportVoyageNumber\": \"test-carrierExportVoyageNumber\",\r\n    \"universalExportVoyageReference\": \"12AZN\",\r\n    \"carrierServiceCode\": \"csc34\",\r\n    \"universalServiceReference\": \"SR00001D\",\r\n    \"eventTypes\": [\r\n        \"EQUIPMENT\",\r\n        \"SHIPMENT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"RECE\",\r\n        \"APPR\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"ARN\",\r\n        \"CAS\",\r\n        \"BKG\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"DEPA\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"LOAD\",\r\n        \"DISC\"\r\n    ],\r\n    \"secret\": \"dmVyeSBzZWNyZXQgc2VjcmV0IHRoYXQgaXMgc28gc2VjcmV0\",\r\n    \"unlocationCode\": \"UNLoc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"\r",
											"\r",
											"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
											"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://other.url\",\r\n    \"documentReference\": \"otherDRef\",\r\n    \"equipmentReference\": \"otherEQRef\",\r\n    \"transportCallReference\": \"otherTCRef\",\r\n    \"carrierExportVoyageNumber\": \"other-car\",\r\n    \"universalExportVoyageReference\": \"35BQE\",\r\n    \"carrierServiceCode\": \"csc78\",\r\n    \"universalServiceReference\": \"SR00013A\",\r\n    \"eventTypes\": [\r\n        \"TRANSPORT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"ISSU\",\r\n        \"DRFT\",\r\n        \"PENC\",\r\n        \"PENU\",\r\n        \"HOLD\",\r\n        \"VOID\",\r\n        \"REQS\",\r\n        \"CANC\",\r\n        \"PENA\",\r\n        \"SUBM\",\r\n        \"SURR\",\r\n        \"CMPL\",\r\n        \"CONF\",\r\n        \"REJE\",\r\n        \"RELS\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"SHI\",\r\n        \"CQU\",\r\n        \"CRO\",\r\n        \"DEO\",\r\n        \"TRD\",\r\n        \"DEI\",\r\n        \"CUC\",\r\n        \"INV\",\r\n        \"CBR\",\r\n        \"TRO\",\r\n        \"VGM\",\r\n        \"OOG\",\r\n        \"DGD\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"ARRI\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"DROP\",\r\n        \"AVDO\",\r\n        \"PICK\",\r\n        \"INSP\",\r\n        \"CUSS\",\r\n        \"STUF\",\r\n        \"CUSI\",\r\n        \"CUSR\",\r\n        \"AVPU\",\r\n        \"STRP\",\r\n        \"GTOT\",\r\n        \"GTIN\",\r\n        \"RMVD\",\r\n        \"RSEA\"\r\n    ],\r\n    \"unlocationCode\": \"locUN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body SubscriptionID matches query parameter \", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.subscriptionID).to.eql(SUBSCRIPTION_ID);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches posted EventSubscriptionWithSecretTO\", () => {\r",
											"    const jsonData = JSON.sort(pm.response.json());\r",
											"    const postRequestBody = JSON.sort(JSON.parse(postRequestBodyRaw));\r",
											"     delete postRequestBody[\"secret\"];\r",
											"     delete jsonData[\"subscriptionID\"];\r",
											"\r",
											"\r",
											"    // For debugging:\r",
											"    console.log(JSON.stringify(jsonData));\r",
											"   console.log(JSON.stringify(postRequestBody));\r",
											"   const isEqual = _.isEqual(jsonData, postRequestBody);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"pm.collectionVariables.unset(\"POST_BODY\");\r",
											"pm.collectionVariables.unset(\"SUBSCRIPTION_ID\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test: create ESWithSecretTO, and update with nulls",
					"item": [
						{
							"name": "create single EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"const parsedBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"SUBSCRIPTION_ID\", parsedBody.subscriptionID);\r",
											"\r",
											"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
											"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": \"test-docRef\",\r\n    \"equipmentReference\": \"test-equipRef\",\r\n    \"transportCallReference\": \"test-transportCallRef\",\r\n    \"vesselIMONumber\": \"1234567\",\r\n    \"carrierExportVoyageNumber\": \"test-carrierExportVoyageNumber\",\r\n    \"universalExportVoyageReference\": \"12AZN\",\r\n    \"carrierServiceCode\": \"csc34\",\r\n    \"universalServiceReference\": \"SR00001D\",\r\n    \"eventTypes\": [\r\n        \"EQUIPMENT\",\r\n        \"SHIPMENT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"RECE\",\r\n        \"APPR\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"ARN\",\r\n        \"CAS\",\r\n        \"BKG\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"DEPA\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"LOAD\",\r\n        \"DISC\"\r\n    ],\r\n    \"secret\": \"dmVyeSBzZWNyZXQgc2VjcmV0IHRoYXQgaXMgc28gc2VjcmV0\",\r\n    \"unlocationCode\": \"UNLoc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"\r",
											"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
											"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": null,\r\n    \"equipmentReference\": null,\r\n    \"transportCallReference\": null,\r\n    \"vesselIMONumber\": null,\r\n    \"carrierExportVoyageNumber\": null,\r\n    \"universalExportVoyageReference\": null,\r\n    \"carrierServiceCode\": null,\r\n    \"universalServiceReference\": null,\r\n    \"eventTypes\": null,\r\n    \"shipmentEventTypeCodes\": null,\r\n    \"documentTypeCodes\": null,\r\n    \"transportEventTypeCodes\": null,\r\n    \"equipmentEventTypeCodes\": null,\r\n    \"unlocationCode\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body SubscriptionID matches query parameter \", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.subscriptionID).to.eql(SUBSCRIPTION_ID);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches posted EventSubscriptionWithSecretTO\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const postRequestBody = JSON.parse(postRequestBodyRaw);\r",
											"    delete jsonData[\"subscriptionID\"];\r",
											"   // remove nulls from posted \r",
											"   // This is done since, null values are not returned on GET response \r",
											"    const postRequestBodywithoutNulls = JSON.cleanObject(postRequestBody) \r",
											"\r",
											"    // For debugging:\r",
											" //   console.log(JSON.stringify(jsonData));\r",
											" //  console.log(JSON.stringify(postRequestBodywithoutNulls));\r",
											"    pm.expect(jsonData).to.eql(postRequestBodywithoutNulls); \r",
											"});\r",
											"pm.collectionVariables.unset(\"POST_BODY\");\r",
											"pm.collectionVariables.unset(\"SUBSCRIPTION_ID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Test: create ESWithSecretTO, and delete",
					"item": [
						{
							"name": "create single EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"const parsedBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"SUBSCRIPTION_ID\", parsedBody.subscriptionID);\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": \"test-docRef\",\r\n    \"equipmentReference\": \"test-equipRef\",\r\n    \"transportCallReference\": \"test-transportCallRef\",\r\n    \"vesselIMONumber\": \"1234567\",\r\n    \"carrierExportVoyageNumber\": \"test-carrierExportVoyageNumber\",\r\n    \"universalExportVoyageReference\": \"12AZN\",\r\n    \"carrierServiceCode\": \"csc34\",\r\n    \"universalServiceReference\": \"SR00001D\",\r\n    \"eventTypes\": [\r\n        \"EQUIPMENT\",\r\n        \"SHIPMENT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"RECE\",\r\n        \"APPR\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"ARN\",\r\n        \"CAS\",\r\n        \"BKG\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"DEPA\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"LOAD\",\r\n        \"DISC\"\r\n    ],\r\n    \"secret\": \"dmVyeSBzZWNyZXQgc2VjcmV0IHRoYXQgaXMgc28gc2VjcmV0\",\r\n    \"unlocationCode\": \"UNLoc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"\r",
											"pm.test(\"Status code is 204\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created EventSubscriptionWithSecretTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"SUBSCRIPTION_ID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}",
									"host": [
										"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
									],
									"path": [
										"event-subscriptions",
										"{{SUBSCRIPTION_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"TNT_SPEC_VERSION\"));",
							"});",
							"// Helper functions for removing empty/nulls from json - This function is used with deep equal comp as API does not return null keys",
							"JSON.cleanObject = obj =>",
							"  _.transform(obj, (acc, v, k) => {",
							"    const val = _.isObject(v) ? cleanObject(v) : v // if current value is an object clean it",
							"    ",
							"    if(_.isEmpty(val)) return // ignore null, undefined, or empty objects / arrays",
							"    ",
							"    acc[k] = val // assign to key",
							"  })",
							"",
							"function isObject(v) {",
							"    return '[object Object]' === Object.prototype.toString.call(v);",
							"};",
							"",
							"// Helper functions for sorting deep json for comparison - This function is used with deep equal comp as order of list fails comparison",
							"JSON.sort = function(o) {",
							"if (Array.isArray(o)) {",
							"        return o.sort().map(JSON.sort);",
							"    } else if (isObject(o)) {",
							"        return Object",
							"            .keys(o)",
							"        .sort()",
							"            .reduce(function(a, k) {",
							"                a[k] = JSON.sort(o[k]);",
							"",
							"                return a;",
							"            }, {});",
							"    }",
							"",
							"    return o;",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Test Unofficial API: create ESWithSecretTO, update secret",
			"item": [
				{
					"name": "create single EventSubscriptionWithSecretTO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = pm.collectionVariables.get(\"EVENT_SUBSCRIPTION_SCHEMA\");\r",
									"const schemaObject = JSON.parse(schema);\r",
									"\r",
									"const parsedBody = pm.response.json();\r",
									"pm.collectionVariables.set(\"SUBSCRIPTION_ID\", parsedBody.subscriptionID);\r",
									"\r",
									"pm.request.body.raw[\"secret\"] // delete secret before setting to compare in NEXT TEST\r",
									"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test('Schema is valid', () => {\r",
									"    pm.response.to.have.jsonSchema(schemaObject);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"callbackUrl\": \"http://test.me/event-subscription-callback-url\",\r\n    \"documentReference\": \"test-docRef\",\r\n    \"equipmentReference\": \"test-equipRef\",\r\n    \"transportCallReference\": \"test-transportCallRef\",\r\n    \"vesselIMONumber\": \"1234567\",\r\n    \"carrierExportVoyageNumber\": \"test-carrierExportVoyageNumber\",\r\n    \"universalExportVoyageReference\": \"12AZN\",\r\n    \"carrierServiceCode\": \"csc34\",\r\n    \"universalServiceReference\": \"SR00001D\",\r\n    \"eventTypes\": [\r\n        \"EQUIPMENT\",\r\n        \"SHIPMENT\"\r\n    ],\r\n    \"shipmentEventTypeCodes\": [\r\n        \"RECE\",\r\n        \"APPR\"\r\n    ],\r\n    \"documentTypeCodes\": [\r\n        \"ARN\",\r\n        \"CAS\",\r\n        \"BKG\"\r\n    ],\r\n    \"transportEventTypeCodes\": [\r\n        \"DEPA\"\r\n    ],\r\n    \"equipmentEventTypeCodes\": [\r\n        \"LOAD\",\r\n        \"DISC\"\r\n    ],\r\n    \"secret\": \"dmVyeSBzZWNyZXQgc2VjcmV0IHRoYXQgaXMgc28gc2VjcmV0\",\r\n    \"unlocationCode\": \"UNLoc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions",
							"host": [
								"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
							],
							"path": [
								"event-subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "update EventSubscriptionWith Secret body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
									"\r",
									"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw) // set body\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"secret\":\"YW5vdGhlciBzZWNyZXQgLSBub3QgdGhlIHNhbWUgYXMgYmVmb3Jl\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/event-subscriptions/{{SUBSCRIPTION_ID}}/secret",
							"host": [
								"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
							],
							"path": [
								"event-subscriptions",
								"{{SUBSCRIPTION_ID}}",
								"secret"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created EventSubscriptionWithSecretTO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const SUBSCRIPTION_ID = pm.collectionVariables.get(\"SUBSCRIPTION_ID\");\r",
									"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body matches updated secret\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const postRequestBody = JSON.parse(postRequestBodyRaw);\r",
									"    pm.expect(jsonData.secret).to.eql(postRequestBody[\"secret\"]);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"POST_BODY\");\r",
									"pm.collectionVariables.unset(\"SUBSCRIPTION_ID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}{{TNT_CONTEXT_PATH}}/unofficial/event-subscriptions-dao/{{SUBSCRIPTION_ID}}",
							"host": [
								"{{BASE_URL}}{{TNT_CONTEXT_PATH}}"
							],
							"path": [
								"unofficial",
								"event-subscriptions-dao",
								"{{SUBSCRIPTION_ID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"key": "TNT_SPEC_VERSION",
			"value": "3.0.0",
			"type": "string"
		},
		{
			"key": "ERROR_SCHEMA",
			"value": "{\"required\":[\"errorDateTime\",\"errors\",\"httpMethod\",\"requestUri\",\"statusCode\",\"statusCodeText\"],\"type\":\"object\",\"properties\":{\"httpMethod\":{\"type\":\"string\",\"description\":\"The http request method type e.g. GET, POST\\n\",\"enum\":[\"GET\",\"HEAD\",\"POST\",\"PUT\",\"DELETE\",\"OPTION\",\"PATCH\"]},\"requestUri\":{\"type\":\"string\",\"description\":\"The request URI as it was sent\\n\"},\"statusCode\":{\"type\":\"integer\",\"description\":\"The HTTP status code\\n\"},\"statusCodeText\":{\"type\":\"string\",\"description\":\"The textual representation of the status code\\n\"},\"errorMessage\":{\"maxLength\":200,\"type\":\"string\",\"description\":\"Other error information\\n\"},\"providerCorrelationID\":{\"type\":\"string\",\"description\":\"A unique identifier for the transaction, e.g. a UUID\\n\"},\"errorDateTime\":{\"type\":\"string\",\"description\":\"The date and time (in ISO 8601 format) the error occurred.\\n\",\"format\":\"date-time\"},\"errors\":{\"minItems\":1,\"type\":\"array\",\"description\":\"List of detailed errors, e.g. fields that could not pass validation\\n\",\"items\":{\"allOf\":[{\"required\":[\"message\",\"reason\"],\"type\":\"object\",\"properties\":{\"errorCode\":{\"maximum\":7999,\"minimum\":7000,\"type\":\"integer\",\"description\":\"Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 â€“ out or range value, 7004 -  invalid type\\n\"},\"field\":{\"type\":\"string\",\"description\":\"The field that caused the error, e.g. a failed validation\\n\"},\"value\":{\"type\":\"string\",\"description\":\"The value that of the field that caused the error\\n\"},\"reason\":{\"type\":\"string\",\"description\":\"High level error message\\n\"},\"message\":{\"type\":\"string\",\"description\":\"Additional information as to why the error occured\\n\"}},\"$schema\":\"http://json-schema.org/schema#\"}]}}},\"$schema\":\"http://json-schema.org/schema#\"}",
			"type": "string"
		},
		{
			"key": "TNT_CONTEXT_PATH",
			"value": "/tnt/v3",
			"type": "string"
		},
		{
			"key": "EVENTS_SCHEMA",
			"value": "{\n    \"type\": \"array\",\n    \"items\": {\n      \"required\": [\n        \"metadata\"\n      ],\n      \"type\": \"object\",\n      \"description\": \"The Event consists of 2 elements\\n\\n- metadata\\n- payload\\n\\nThe metadata object is common for all `eventTypes` and is mandatory. The payload can be `Shipment`, `Equipment` or `Transport` related and is conditional\\n\",\n      \"properties\": {\n        \"metadata\": {\n          \"required\": [\n            \"eventCreatedDateTime\",\n            \"eventID\",\n            \"eventType\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"The metadata of the event \\n\",\n          \"properties\": {\n            \"eventID\": {\n              \"type\": \"string\",\n              \"description\": \"The unique identifier for this event (*the message - not the source*).\\n\"\n            },\n            \"eventCreatedDateTime\": {\n              \"type\": \"string\",\n              \"description\": \"The timestamp of when the event was created.\\n\"\n            },\n            \"retractedEventID\": {\n              \"type\": \"string\",\n              \"description\": \"Reference to an Event that is to be retracted. If provided, the payload of the event **MUST not** be included.\\n\"\n            },\n            \"eventType\": {\n              \"type\": \"string\",\n              \"description\": \"The type of the Event - to be used as a discriminator. Possible values are\\n\\n- SHIPMENT (A Shippment event)\\n- EQUIPMENT (An Equipment event)\\n- TRANSPORT (A Transport event)\\n\",\n              \"enum\": [\n                \"SHIPMENT\",\n                \"EQUIPMENT\",\n                \"TRANSPORT\"\n              ]\n            }\n          }\n        },\n        \"payload\": {\n          \"description\": \"This is a conditional object - if `retractedEventID` is **not** provided in the `metadata` then this `payload` object is mandatory\\n\",\n          \"oneOf\": [\n            {\n              \"type\": \"object\",\n              \"description\": \"The business attributes related to the `ShipmentEvent`.\\n\",\n              \"required\": [\n                \"documentReference\",\n                \"documentTypeCode\",\n                \"eventClassifierCode\",\n                \"eventDateTime\",\n                \"shipmentEventTypeCode\"\n              ],\n              \"properties\": {\n                \"eventClassifierCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n                  \"enum\": [\n                    \"ACT\"\n                  ]\n                },\n                \"eventDateTime\": {\n                  \"type\": \"string\",\n                  \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n                },\n                \"shipmentEventTypeCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"The status of the document in the process. Possible values are\\n- RECE (Received)\\n- DRFT (Drafted)\\n- PENA (Pending Approval)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- SUBM (Submitted)\\n- VOID (Void)\\n- REQS (Requested)\\n- CMPL (Completed)\\n- HOLD (On Hold)\\n- RELS (Released)\\n- CANC (Cancelled)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv)\\n\",\n                  \"enum\": [\n                    \"RECE\",\n                    \"DRFT\",\n                    \"PENA\",\n                    \"PENU\",\n                    \"PENC\",\n                    \"CONF\",\n                    \"REJE\",\n                    \"APPR\",\n                    \"ISSU\",\n                    \"SURR\",\n                    \"SUBM\",\n                    \"VOID\",\n                    \"REQS\",\n                    \"CMPL\",\n                    \"HOLD\",\n                    \"RELS\",\n                    \"CANC\"\n                  ]\n                },\n                \"documentTypeCode\": {\n                  \"maxLength\": 3,\n                  \"type\": \"string\",\n                  \"description\": \"The `documentTypeCode` is used to identify the type of information `documentReference` points to. Can be one of the following values\\n- CBR (Carrier Booking Request)\\n- BKG (Booking)\\n- SHI (Shipping Instruction)\\n- TRD (Transport Document)\\n- DEI (Delivery Instructions)\\n- DEO (Delivery Order)\\n- TRO (Transport Order)\\n- CRO (Container Release Order)\\n- ARN (Arrival Notice)\\n- VGM (Verified Gross Mass)\\n- CAS (Cargo Survey)\\n- CUC (Customs Clearance)\\n- DGD (Dangerous Goods Declaration)\\n- OOG (Out of Gauge)\\n- CQU (Contract Quotation)\\n- INV (Invoice)\\n- HCE (Health Certificate)\\n- PCE (Phytosanitary Certificate)\\n- VCE (Veterinary Certificate)\\n- FCE (Fumigation Certificate)\\n- ICE (Inspection Certificate)\\n- CEA (Certificate of Analysis)\\n- CEO (Certificate of Origin)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv)\\n\",\n                  \"enum\": [\n                    \"CBR\",\n                    \"BKG\",\n                    \"SHI\",\n                    \"TRD\",\n                    \"DEI\",\n                    \"DEO\",\n                    \"TRO\",\n                    \"CRO\",\n                    \"ARN\",\n                    \"VGM\",\n                    \"CAS\",\n                    \"CUC\",\n                    \"DGD\",\n                    \"OOG\",\n                    \"CQU\",\n                    \"INV\",\n                    \"HCE\",\n                    \"PCE\",\n                    \"VCE\",\n                    \"FCE\",\n                    \"ICE\",\n                    \"CEA\",\n                    \"CEO\"\n                  ]\n                },\n                \"documentReference\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The reference of the object defined by the `documentTypeCode`\\n\"\n                },\n                \"reason\": {\n                  \"maxLength\": 250,\n                  \"type\": \"string\",\n                  \"description\": \"This field can be used to explain why a specific `ShipmentEvent` has been sent.\\n\"\n                },\n                \"relatedDocumentReferences\": {\n                  \"type\": \"array\",\n                  \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n                        \"enum\": [\n                          \"CBR\",\n                          \"BKG\",\n                          \"SHI\",\n                          \"TRD\"\n                        ]\n                      },\n                      \"value\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The reference to the object described by `type`\\n\"\n                      }\n                    }\n                  }\n                },\n                \"references\": {\n                  \"required\": [\n                    \"type\",\n                    \"value\"\n                  ],\n                  \"type\": \"array\",\n                  \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n                        \"enum\": [\n                          \"FF\",\n                          \"SI\",\n                          \"PO\",\n                          \"CR\",\n                          \"AAO\",\n                          \"ECR\",\n                          \"CSI\",\n                          \"BPR\",\n                          \"BID\",\n                          \"EQ\",\n                          \"RUC\",\n                          \"DUE\",\n                          \"CER\",\n                          \"AES\"\n                        ]\n                      },\n                      \"value\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The actual value of the reference.\"\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"description\": \"The business attributes related to the `EquipmentEvent`.\\n\",\n              \"required\": [\n                \"emptyIndicatorCode\",\n                \"equipmentEventTypeCode\",\n                \"eventClassifierCode\",\n                \"eventDateTime\"\n              ],\n              \"properties\": {\n                \"eventClassifierCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n                  \"enum\": [\n                    \"ACT\",\n                    \"PLN\",\n                    \"EST\"\n                  ]\n                },\n                \"eventDateTime\": {\n                  \"type\": \"string\",\n                  \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n                },\n                \"equipmentEventTypeCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"Unique identifier for `equipmentEventTypeCode` - can be one of the following values\\n- LOAD (Loaded)\\n- DISC (Discharged)\\n- GTIN (Gated in)\\n- GTOT (Gated out)\\n- STUF (Stuffed)\\n- STRP (Stripped)\\n- PICK (Pick-up)\\n- AVPU (Available for Pick-up)\\n- DROP (Drop-off)\\n- AVDO (Available for Drop-off)\\n- INSP (Inspected)\\n- RSEA (Resealed)\\n- RMVD (Removed)\\n- CUSS (Customs Selected for Scan)\\n- CUSI (Customs Selected for Inspection)\\n- CUSR (Customs Released)\\n- CROS (Crossed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\\\">GitHub</a>\\n\",\n                  \"enum\": [\n                    \"LOAD\",\n                    \"DISC\",\n                    \"GTIN\",\n                    \"GTOT\",\n                    \"STUF\",\n                    \"STRP\",\n                    \"AVPU\",\n                    \"PICK\",\n                    \"AVDO\",\n                    \"DROP\",\n                    \"INSP\",\n                    \"RSEA\",\n                    \"RMVD\",\n                    \"CUSS\",\n                    \"CUSI\",\n                    \"CUSR\",\n                    \"CROS\"\n                  ]\n                },\n                \"equipmentReference\": {\n                  \"maxLength\": 15,\n                  \"type\": \"string\",\n                  \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n                },\n                \"ISOEquipmentCode\": {\n                  \"maxLength\": 4,\n                  \"type\": \"string\",\n                  \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n                },\n                \"emptyIndicatorCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"Code to denote whether the equipment is empty or laden.\",\n                  \"enum\": [\n                    \"EMPTY\",\n                    \"LADEN\"\n                  ]\n                },\n                \"isTransshipmentMove\": {\n                  \"type\": \"boolean\",\n                  \"description\": \"Indicates whether this event is originated in relation to an ocean transshipment or inter terminal move. `isTransshipmentMove` can be set to true in combination with one of the following `equipmentEventTypeCodes`:\\n\\n- `LOAD` (Load)\\n- `DISC` (Discharge)\\n- `GTIN` (Gate In)\\n- `GTOT` (Gate Out)\\n- `PICK` (Pick-up)\\n- `DROP` (Drop-off)\\n\"\n                },\n                \"eventLocation\": {\n                  \"description\": \"General purpose object to capture the location in the `EquipmentEvent` whenever it is **not** associated with a `TransportCall` (this could be stuffing and stripping). The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n                  \"anyOf\": [\n                    {\n                      \"required\": [\n                        \"facilityCode\",\n                        \"facilityCodeListProvider\"\n                      ],\n                      \"type\": \"object\",\n                      \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                      \"properties\": {\n                        \"locationName\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"The name of the location.\"\n                        },\n                        \"UNLocationCode\": {\n                          \"maxLength\": 5,\n                          \"type\": \"string\",\n                          \"description\": \"The UN Location code specifying where the place is located.\"\n                        },\n                        \"facilityCode\": {\n                          \"maxLength\": 6,\n                          \"type\": \"string\",\n                          \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                        },\n                        \"facilityCodeListProvider\": {\n                          \"type\": \"string\",\n                          \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                          \"enum\": [\n                            \"BIC\",\n                            \"SMDG\"\n                          ]\n                        }\n                      }\n                    },\n                    {\n                      \"required\": [\n                        \"UNLocationCode\"\n                      ],\n                      \"type\": \"object\",\n                      \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                      \"properties\": {\n                        \"locationName\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"The name of the location.\"\n                        },\n                        \"UNLocationCode\": {\n                          \"maxLength\": 5,\n                          \"type\": \"string\",\n                          \"description\": \"The UN Location code specifying where the place is located.\"\n                        }\n                      }\n                    },\n                    {\n                      \"required\": [\n                        \"address\"\n                      ],\n                      \"type\": \"object\",\n                      \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                      \"properties\": {\n                        \"locationName\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"The name of the location.\"\n                        },\n                        \"address\": {\n                          \"description\": \"Address related information\",\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"name\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"Name of the address\"\n                            },\n                            \"street\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                            },\n                            \"streetNumber\": {\n                              \"maxLength\": 50,\n                              \"type\": \"string\",\n                              \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                            },\n                            \"floor\": {\n                              \"maxLength\": 50,\n                              \"type\": \"string\",\n                              \"description\": \"The floor of the partyÔÇÖs street number.\"\n                            },\n                            \"postCode\": {\n                              \"maxLength\": 50,\n                              \"type\": \"string\",\n                              \"description\": \"The post code of the partyÔÇÖs address.\"\n                            },\n                            \"city\": {\n                              \"maxLength\": 65,\n                              \"type\": \"string\",\n                              \"description\": \"The city name of the partyÔÇÖs address.\"\n                            },\n                            \"stateRegion\": {\n                              \"maxLength\": 65,\n                              \"type\": \"string\",\n                              \"description\": \"The state/region of the partyÔÇÖs address.\"\n                            },\n                            \"country\": {\n                              \"maxLength\": 75,\n                              \"type\": \"string\",\n                              \"description\": \"The country of the partyÔÇÖs address.\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  ]\n                },\n                \"transportCall\": {\n                  \"required\": [\n                    \"modeOfTransport\",\n                    \"transportCallReference\"\n                  ],\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"transportCallReference\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n                    },\n                    \"transportCallSequenceNumber\": {\n                      \"type\": \"integer\",\n                      \"description\": \"Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\\n\"\n                    },\n                    \"modeOfTransport\": {\n                      \"type\": \"string\",\n                      \"description\": \"The mode of transport as defined by DCSA.\\n\",\n                      \"enum\": [\n                        \"VESSEL\",\n                        \"RAIL\",\n                        \"TRUCK\",\n                        \"BARGE\"\n                      ]\n                    },\n                    \"location\": {\n                      \"description\": \"General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n                      \"anyOf\": [\n                        {\n                          \"required\": [\n                            \"facilityCode\",\n                            \"facilityCodeListProvider\"\n                          ],\n                          \"type\": \"object\",\n                          \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                          \"properties\": {\n                            \"locationName\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the location.\"\n                            },\n                            \"UNLocationCode\": {\n                              \"maxLength\": 5,\n                              \"type\": \"string\",\n                              \"description\": \"The UN Location code specifying where the place is located.\"\n                            },\n                            \"facilityCode\": {\n                              \"maxLength\": 6,\n                              \"type\": \"string\",\n                              \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                            },\n                            \"facilityCodeListProvider\": {\n                              \"type\": \"string\",\n                              \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                              \"enum\": [\n                                \"BIC\",\n                                \"SMDG\"\n                              ]\n                            }\n                          }\n                        },\n                        {\n                          \"required\": [\n                            \"UNLocationCode\"\n                          ],\n                          \"type\": \"object\",\n                          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                          \"properties\": {\n                            \"locationName\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the location.\"\n                            },\n                            \"UNLocationCode\": {\n                              \"maxLength\": 5,\n                              \"type\": \"string\",\n                              \"description\": \"The UN Location code specifying where the place is located.\"\n                            }\n                          }\n                        },\n                        {\n                          \"required\": [\n                            \"address\"\n                          ],\n                          \"type\": \"object\",\n                          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                          \"properties\": {\n                            \"locationName\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the location.\"\n                            },\n                            \"address\": {\n                              \"description\": \"Address related information\",\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"name\": {\n                                  \"maxLength\": 100,\n                                  \"type\": \"string\",\n                                  \"description\": \"Name of the address\"\n                                },\n                                \"street\": {\n                                  \"maxLength\": 100,\n                                  \"type\": \"string\",\n                                  \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                                },\n                                \"streetNumber\": {\n                                  \"maxLength\": 50,\n                                  \"type\": \"string\",\n                                  \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                                },\n                                \"floor\": {\n                                  \"maxLength\": 50,\n                                  \"type\": \"string\",\n                                  \"description\": \"The floor of the partyÔÇÖs street number.\"\n                                },\n                                \"postCode\": {\n                                  \"maxLength\": 50,\n                                  \"type\": \"string\",\n                                  \"description\": \"The post code of the partyÔÇÖs address.\"\n                                },\n                                \"city\": {\n                                  \"maxLength\": 65,\n                                  \"type\": \"string\",\n                                  \"description\": \"The city name of the partyÔÇÖs address.\"\n                                },\n                                \"stateRegion\": {\n                                  \"maxLength\": 65,\n                                  \"type\": \"string\",\n                                  \"description\": \"The state/region of the partyÔÇÖs address.\"\n                                },\n                                \"country\": {\n                                  \"maxLength\": 75,\n                                  \"type\": \"string\",\n                                  \"description\": \"The country of the partyÔÇÖs address.\"\n                                }\n                              }\n                            }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                },\n                \"facilityTypeCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"The code to identify the specific type of facility. The code indicates which role the facility plays if this `EquipmentEvent` is related to *stuffing*/*stipping* (in case the event does not have a `transportCall`). Possible values\\n- BORD (Border)\\n- CLOC (Customer location)\\n- COFS (Container freight station)\\n- OFFD (Off dock storage)\\n- DEPO (Depot)\\n- INTE (Inland terminal)\\n- POTE (Port terminal)\\n- RAMP (Ramp)\\n- WAYP (Waypoint)\\n\",\n                  \"enum\": [\n                    \"BORD\",\n                    \"CLOC\",\n                    \"COFS\",\n                    \"OFFD\",\n                    \"DEPO\",\n                    \"INTE\",\n                    \"POTE\",\n                    \"RAMP\",\n                    \"WAYP\"\n                  ]\n                },\n                \"relatedDocumentReferences\": {\n                  \"type\": \"array\",\n                  \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n                        \"enum\": [\n                          \"CBR\",\n                          \"BKG\",\n                          \"SHI\",\n                          \"TRD\"\n                        ]\n                      },\n                      \"value\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The reference to the object described by `type`\\n\"\n                      }\n                    }\n                  }\n                },\n                \"references\": {\n                  \"required\": [\n                    \"type\",\n                    \"value\"\n                  ],\n                  \"type\": \"array\",\n                  \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n                        \"enum\": [\n                          \"FF\",\n                          \"SI\",\n                          \"PO\",\n                          \"CR\",\n                          \"AAO\",\n                          \"ECR\",\n                          \"CSI\",\n                          \"BPR\",\n                          \"BID\",\n                          \"EQ\",\n                          \"RUC\",\n                          \"DUE\",\n                          \"CER\",\n                          \"AES\"\n                        ]\n                      },\n                      \"value\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The actual value of the reference.\"\n                      }\n                    }\n                  }\n                },\n                \"seals\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"required\": [\n                      \"number\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.\",\n                    \"properties\": {\n                      \"number\": {\n                        \"maxLength\": 15,\n                        \"type\": \"string\",\n                        \"description\": \"Identifies a seal affixed to the container.\"\n                      },\n                      \"source\": {\n                        \"type\": \"string\",\n                        \"description\": \"The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\\n- CAR (Carrier)\\n- SHI (Shipper)\\n- PHY (Phytosanitary)\\n- VET (Veterinary)\\n- CUS (Customs)\\n\",\n                        \"enum\": [\n                          \"CAR\",\n                          \"SHI\",\n                          \"PHY\",\n                          \"VET\",\n                          \"CUS\"\n                        ]\n                      },\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\\n- KLP (Keyless padlock)\\n- BLT (Bolt)\\n- WIR (Wire)\\n\",\n                        \"enum\": [\n                          \"KLP\",\n                          \"BLT\",\n                          \"WIR\"\n                        ]\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"type\": \"object\",\n              \"description\": \"The business attributes related to the `TransportEvent`.\\n\",\n              \"required\": [\n                \"eventClassifierCode\",\n                \"eventDateTime\",\n                \"transportCall\",\n                \"transportEventTypeCode\"\n              ],\n              \"properties\": {\n                \"eventClassifierCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n                  \"enum\": [\n                    \"ACT\",\n                    \"PLN\",\n                    \"EST\"\n                  ]\n                },\n                \"eventDateTime\": {\n                  \"type\": \"string\",\n                  \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n                },\n                \"transportEventTypeCode\": {\n                  \"type\": \"string\",\n                  \"description\": \"Identifier for type of `transportEvent`\\n- ARRI (Arrived)\\n- DEPA (Departed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\\\">GitHub</a>\\n\",\n                  \"enum\": [\n                    \"ARRI\",\n                    \"DEPA\"\n                  ]\n                },\n                \"delayReasonCode\": {\n                  \"maxLength\": 3,\n                  \"type\": \"string\",\n                  \"description\": \"Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.\\n\"\n                },\n                \"changeRemark\": {\n                  \"maxLength\": 250,\n                  \"type\": \"string\",\n                  \"description\": \"Free text field to provide information as to why the `TransportEvent` was sent\\n\"\n                },\n                \"transportCall\": {\n                  \"required\": [\n                    \"modeOfTransport\",\n                    \"transportCallReference\"\n                  ],\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"transportCallReference\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n                    },\n                    \"transportCallSequenceNumber\": {\n                      \"type\": \"integer\",\n                      \"description\": \"Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\\n\"\n                    },\n                    \"modeOfTransport\": {\n                      \"type\": \"string\",\n                      \"description\": \"The mode of transport as defined by DCSA.\\n\",\n                      \"enum\": [\n                        \"VESSEL\",\n                        \"RAIL\",\n                        \"TRUCK\",\n                        \"BARGE\"\n                      ]\n                    },\n                    \"location\": {\n                      \"description\": \"General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n                      \"anyOf\": [\n                        {\n                          \"required\": [\n                            \"facilityCode\",\n                            \"facilityCodeListProvider\"\n                          ],\n                          \"type\": \"object\",\n                          \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                          \"properties\": {\n                            \"locationName\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the location.\"\n                            },\n                            \"UNLocationCode\": {\n                              \"maxLength\": 5,\n                              \"type\": \"string\",\n                              \"description\": \"The UN Location code specifying where the place is located.\"\n                            },\n                            \"facilityCode\": {\n                              \"maxLength\": 6,\n                              \"type\": \"string\",\n                              \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                            },\n                            \"facilityCodeListProvider\": {\n                              \"type\": \"string\",\n                              \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                              \"enum\": [\n                                \"BIC\",\n                                \"SMDG\"\n                              ]\n                            }\n                          }\n                        },\n                        {\n                          \"required\": [\n                            \"UNLocationCode\"\n                          ],\n                          \"type\": \"object\",\n                          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                          \"properties\": {\n                            \"locationName\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the location.\"\n                            },\n                            \"UNLocationCode\": {\n                              \"maxLength\": 5,\n                              \"type\": \"string\",\n                              \"description\": \"The UN Location code specifying where the place is located.\"\n                            }\n                          }\n                        },\n                        {\n                          \"required\": [\n                            \"address\"\n                          ],\n                          \"type\": \"object\",\n                          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                          \"properties\": {\n                            \"locationName\": {\n                              \"maxLength\": 100,\n                              \"type\": \"string\",\n                              \"description\": \"The name of the location.\"\n                            },\n                            \"address\": {\n                              \"description\": \"Address related information\",\n                              \"type\": \"object\",\n                              \"properties\": {\n                                \"name\": {\n                                  \"maxLength\": 100,\n                                  \"type\": \"string\",\n                                  \"description\": \"Name of the address\"\n                                },\n                                \"street\": {\n                                  \"maxLength\": 100,\n                                  \"type\": \"string\",\n                                  \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                                },\n                                \"streetNumber\": {\n                                  \"maxLength\": 50,\n                                  \"type\": \"string\",\n                                  \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                                },\n                                \"floor\": {\n                                  \"maxLength\": 50,\n                                  \"type\": \"string\",\n                                  \"description\": \"The floor of the partyÔÇÖs street number.\"\n                                },\n                                \"postCode\": {\n                                  \"maxLength\": 50,\n                                  \"type\": \"string\",\n                                  \"description\": \"The post code of the partyÔÇÖs address.\"\n                                },\n                                \"city\": {\n                                  \"maxLength\": 65,\n                                  \"type\": \"string\",\n                                  \"description\": \"The city name of the partyÔÇÖs address.\"\n                                },\n                                \"stateRegion\": {\n                                  \"maxLength\": 65,\n                                  \"type\": \"string\",\n                                  \"description\": \"The state/region of the partyÔÇÖs address.\"\n                                },\n                                \"country\": {\n                                  \"maxLength\": 75,\n                                  \"type\": \"string\",\n                                  \"description\": \"The country of the partyÔÇÖs address.\"\n                                }\n                              }\n                            }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                },\n                \"relatedDocumentReferences\": {\n                  \"type\": \"array\",\n                  \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n                        \"enum\": [\n                          \"CBR\",\n                          \"BKG\",\n                          \"SHI\",\n                          \"TRD\"\n                        ]\n                      },\n                      \"value\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The reference to the object described by `type`\\n\"\n                      }\n                    }\n                  }\n                },\n                \"references\": {\n                  \"required\": [\n                    \"type\",\n                    \"value\"\n                  ],\n                  \"type\": \"array\",\n                  \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n                        \"enum\": [\n                          \"FF\",\n                          \"SI\",\n                          \"PO\",\n                          \"CR\",\n                          \"AAO\",\n                          \"ECR\",\n                          \"CSI\",\n                          \"BPR\",\n                          \"BID\",\n                          \"EQ\",\n                          \"RUC\",\n                          \"DUE\",\n                          \"CER\",\n                          \"AES\"\n                        ]\n                      },\n                      \"value\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The actual value of the reference.\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }",
			"type": "string"
		},
		{
			"key": "TNT_SHIPMENT_EVENTS_PAYLOAD_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"description\": \"The business attributes related to the `ShipmentEvent`.\\n\",\n  \"required\": [\n    \"documentReference\",\n    \"documentTypeCode\",\n    \"eventClassifierCode\",\n    \"eventDateTime\",\n    \"shipmentEventTypeCode\"\n  ],\n  \"properties\": {\n    \"eventClassifierCode\": {\n      \"type\": \"string\",\n      \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n      \"enum\": [\n        \"ACT\"\n      ]\n    },\n    \"eventDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n    },\n    \"shipmentEventTypeCode\": {\n      \"type\": \"string\",\n      \"description\": \"The status of the document in the process. Possible values are\\n- RECE (Received)\\n- DRFT (Drafted)\\n- PENA (Pending Approval)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- SUBM (Submitted)\\n- VOID (Void)\\n- REQS (Requested)\\n- CMPL (Completed)\\n- HOLD (On Hold)\\n- RELS (Released)\\n- CANC (Cancelled)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv)\\n\",\n      \"enum\": [\n        \"RECE\",\n        \"DRFT\",\n        \"PENA\",\n        \"PENU\",\n        \"PENC\",\n        \"CONF\",\n        \"REJE\",\n        \"APPR\",\n        \"ISSU\",\n        \"SURR\",\n        \"SUBM\",\n        \"VOID\",\n        \"REQS\",\n        \"CMPL\",\n        \"HOLD\",\n        \"RELS\",\n        \"CANC\"\n      ]\n    },\n    \"documentTypeCode\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"The `documentTypeCode` is used to identify the type of information `documentReference` points to. Can be one of the following values\\n- CBR (Carrier Booking Request)\\n- BKG (Booking)\\n- SHI (Shipping Instruction)\\n- TRD (Transport Document)\\n- DEI (Delivery Instructions)\\n- DEO (Delivery Order)\\n- TRO (Transport Order)\\n- CRO (Container Release Order)\\n- ARN (Arrival Notice)\\n- VGM (Verified Gross Mass)\\n- CAS (Cargo Survey)\\n- CUC (Customs Clearance)\\n- DGD (Dangerous Goods Declaration)\\n- OOG (Out of Gauge)\\n- CQU (Contract Quotation)\\n- INV (Invoice)\\n- HCE (Health Certificate)\\n- PCE (Phytosanitary Certificate)\\n- VCE (Veterinary Certificate)\\n- FCE (Fumigation Certificate)\\n- ICE (Inspection Certificate)\\n- CEA (Certificate of Analysis)\\n- CEO (Certificate of Origin)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv)\\n\",\n      \"enum\": [\n        \"CBR\",\n        \"BKG\",\n        \"SHI\",\n        \"TRD\",\n        \"DEI\",\n        \"DEO\",\n        \"TRO\",\n        \"CRO\",\n        \"ARN\",\n        \"VGM\",\n        \"CAS\",\n        \"CUC\",\n        \"DGD\",\n        \"OOG\",\n        \"CQU\",\n        \"INV\",\n        \"HCE\",\n        \"PCE\",\n        \"VCE\",\n        \"FCE\",\n        \"ICE\",\n        \"CEA\",\n        \"CEO\"\n      ]\n    },\n    \"documentReference\": {\n      \"maxLength\": 100,\n      \"type\": \"string\",\n      \"description\": \"The reference of the object defined by the `documentTypeCode`\\n\"\n    },\n    \"reason\": {\n      \"maxLength\": 250,\n      \"type\": \"string\",\n      \"description\": \"This field can be used to explain why a specific `ShipmentEvent` has been sent.\\n\"\n    },\n    \"relatedDocumentReferences\": {\n      \"type\": \"array\",\n      \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n            \"enum\": [\n              \"CBR\",\n              \"BKG\",\n              \"SHI\",\n              \"TRD\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The reference to the object described by `type`\\n\"\n          }\n        }\n      }\n    },\n    \"references\": {\n      \"required\": [\n        \"type\",\n        \"value\"\n      ],\n      \"type\": \"array\",\n      \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n            \"enum\": [\n              \"FF\",\n              \"SI\",\n              \"PO\",\n              \"CR\",\n              \"AAO\",\n              \"ECR\",\n              \"CSI\",\n              \"BPR\",\n              \"BID\",\n              \"EQ\",\n              \"RUC\",\n              \"DUE\",\n              \"CER\",\n              \"AES\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The actual value of the reference.\"\n          }\n        }\n      }\n    }\n  }\n}",
			"type": "string"
		},
		{
			"key": "TNT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"description\": \"The business attributes related to the `EquipmentEvent`.\\n\",\n  \"required\": [\n    \"emptyIndicatorCode\",\n    \"equipmentEventTypeCode\",\n    \"eventClassifierCode\",\n    \"eventDateTime\"\n  ],\n  \"properties\": {\n    \"eventClassifierCode\": {\n      \"type\": \"string\",\n      \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n      \"enum\": [\n        \"ACT\",\n        \"PLN\",\n        \"EST\"\n      ]\n    },\n    \"eventDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n    },\n    \"equipmentEventTypeCode\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for `equipmentEventTypeCode` - can be one of the following values\\n- LOAD (Loaded)\\n- DISC (Discharged)\\n- GTIN (Gated in)\\n- GTOT (Gated out)\\n- STUF (Stuffed)\\n- STRP (Stripped)\\n- PICK (Pick-up)\\n- AVPU (Available for Pick-up)\\n- DROP (Drop-off)\\n- AVDO (Available for Drop-off)\\n- INSP (Inspected)\\n- RSEA (Resealed)\\n- RMVD (Removed)\\n- CUSS (Customs Selected for Scan)\\n- CUSI (Customs Selected for Inspection)\\n- CUSR (Customs Released)\\n- CROS (Crossed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\\\">GitHub</a>\\n\",\n      \"enum\": [\n        \"LOAD\",\n        \"DISC\",\n        \"GTIN\",\n        \"GTOT\",\n        \"STUF\",\n        \"STRP\",\n        \"AVPU\",\n        \"PICK\",\n        \"AVDO\",\n        \"DROP\",\n        \"INSP\",\n        \"RSEA\",\n        \"RMVD\",\n        \"CUSS\",\n        \"CUSI\",\n        \"CUSR\",\n        \"CROS\"\n      ]\n    },\n    \"equipmentReference\": {\n      \"maxLength\": 15,\n      \"type\": \"string\",\n      \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n    },\n    \"ISOEquipmentCode\": {\n      \"maxLength\": 4,\n      \"type\": \"string\",\n      \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n    },\n    \"emptyIndicatorCode\": {\n      \"type\": \"string\",\n      \"description\": \"Code to denote whether the equipment is empty or laden.\",\n      \"enum\": [\n        \"EMPTY\",\n        \"LADEN\"\n      ]\n    },\n    \"isTransshipmentMove\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates whether this event is originated in relation to an ocean transshipment or inter terminal move. `isTransshipmentMove` can be set to true in combination with one of the following `equipmentEventTypeCodes`:\\n\\n- `LOAD` (Load)\\n- `DISC` (Discharge)\\n- `GTIN` (Gate In)\\n- `GTOT` (Gate Out)\\n- `PICK` (Pick-up)\\n- `DROP` (Drop-off)\\n\"\n    },\n    \"eventLocation\": {\n      \"description\": \"General purpose object to capture the location in the `EquipmentEvent` whenever it is **not** associated with a `TransportCall` (this could be stuffing and stripping). The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n      \"anyOf\": [\n        {\n          \"required\": [\n            \"facilityCode\",\n            \"facilityCodeListProvider\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"UNLocationCode\": {\n              \"maxLength\": 5,\n              \"type\": \"string\",\n              \"description\": \"The UN Location code specifying where the place is located.\"\n            },\n            \"facilityCode\": {\n              \"maxLength\": 6,\n              \"type\": \"string\",\n              \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n            },\n            \"facilityCodeListProvider\": {\n              \"type\": \"string\",\n              \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n              \"enum\": [\n                \"BIC\",\n                \"SMDG\"\n              ]\n            }\n          }\n        },\n        {\n          \"required\": [\n            \"UNLocationCode\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"UNLocationCode\": {\n              \"maxLength\": 5,\n              \"type\": \"string\",\n              \"description\": \"The UN Location code specifying where the place is located.\"\n            }\n          }\n        },\n        {\n          \"required\": [\n            \"address\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"address\": {\n              \"description\": \"Address related information\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"Name of the address\"\n                },\n                \"street\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                },\n                \"streetNumber\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                },\n                \"floor\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The floor of the partyÔÇÖs street number.\"\n                },\n                \"postCode\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The post code of the partyÔÇÖs address.\"\n                },\n                \"city\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The city name of the partyÔÇÖs address.\"\n                },\n                \"stateRegion\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The state/region of the partyÔÇÖs address.\"\n                },\n                \"country\": {\n                  \"maxLength\": 75,\n                  \"type\": \"string\",\n                  \"description\": \"The country of the partyÔÇÖs address.\"\n                }\n              }\n            }\n          }\n        }\n      ]\n    },\n    \"transportCall\": {\n      \"required\": [\n        \"modeOfTransport\",\n        \"transportCallReference\"\n      ],\n      \"type\": \"object\",\n      \"properties\": {\n        \"transportCallReference\": {\n          \"maxLength\": 100,\n          \"type\": \"string\",\n          \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n        },\n        \"transportCallSequenceNumber\": {\n          \"type\": \"integer\",\n          \"description\": \"Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\\n\"\n        },\n        \"modeOfTransport\": {\n          \"type\": \"string\",\n          \"description\": \"The mode of transport as defined by DCSA.\\n\",\n          \"enum\": [\n            \"VESSEL\",\n            \"RAIL\",\n            \"TRUCK\",\n            \"BARGE\"\n          ]\n        },\n        \"location\": {\n          \"description\": \"General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n          \"anyOf\": [\n            {\n              \"required\": [\n                \"facilityCode\",\n                \"facilityCodeListProvider\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                },\n                \"facilityCode\": {\n                  \"maxLength\": 6,\n                  \"type\": \"string\",\n                  \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                },\n                \"facilityCodeListProvider\": {\n                  \"type\": \"string\",\n                  \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                  \"enum\": [\n                    \"BIC\",\n                    \"SMDG\"\n                  ]\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"UNLocationCode\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"address\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using an `Address` object\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"address\": {\n                  \"description\": \"Address related information\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Name of the address\"\n                    },\n                    \"street\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                    },\n                    \"streetNumber\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                    },\n                    \"floor\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The floor of the partyÔÇÖs street number.\"\n                    },\n                    \"postCode\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The post code of the partyÔÇÖs address.\"\n                    },\n                    \"city\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The city name of the partyÔÇÖs address.\"\n                    },\n                    \"stateRegion\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The state/region of the partyÔÇÖs address.\"\n                    },\n                    \"country\": {\n                      \"maxLength\": 75,\n                      \"type\": \"string\",\n                      \"description\": \"The country of the partyÔÇÖs address.\"\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    },\n    \"facilityTypeCode\": {\n      \"type\": \"string\",\n      \"description\": \"The code to identify the specific type of facility. The code indicates which role the facility plays if this `EquipmentEvent` is related to *stuffing*/*stipping* (in case the event does not have a `transportCall`). Possible values\\n- BORD (Border)\\n- CLOC (Customer location)\\n- COFS (Container freight station)\\n- OFFD (Off dock storage)\\n- DEPO (Depot)\\n- INTE (Inland terminal)\\n- POTE (Port terminal)\\n- RAMP (Ramp)\\n- WAYP (Waypoint)\\n\",\n      \"enum\": [\n        \"BORD\",\n        \"CLOC\",\n        \"COFS\",\n        \"OFFD\",\n        \"DEPO\",\n        \"INTE\",\n        \"POTE\",\n        \"RAMP\",\n        \"WAYP\"\n      ]\n    },\n    \"relatedDocumentReferences\": {\n      \"type\": \"array\",\n      \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n            \"enum\": [\n              \"CBR\",\n              \"BKG\",\n              \"SHI\",\n              \"TRD\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The reference to the object described by `type`\\n\"\n          }\n        }\n      }\n    },\n    \"references\": {\n      \"required\": [\n        \"type\",\n        \"value\"\n      ],\n      \"type\": \"array\",\n      \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n            \"enum\": [\n              \"FF\",\n              \"SI\",\n              \"PO\",\n              \"CR\",\n              \"AAO\",\n              \"ECR\",\n              \"CSI\",\n              \"BPR\",\n              \"BID\",\n              \"EQ\",\n              \"RUC\",\n              \"DUE\",\n              \"CER\",\n              \"AES\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The actual value of the reference.\"\n          }\n        }\n      }\n    },\n    \"seals\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"number\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.\",\n        \"properties\": {\n          \"number\": {\n            \"maxLength\": 15,\n            \"type\": \"string\",\n            \"description\": \"Identifies a seal affixed to the container.\"\n          },\n          \"source\": {\n            \"type\": \"string\",\n            \"description\": \"The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\\n- CAR (Carrier)\\n- SHI (Shipper)\\n- PHY (Phytosanitary)\\n- VET (Veterinary)\\n- CUS (Customs)\\n\",\n            \"enum\": [\n              \"CAR\",\n              \"SHI\",\n              \"PHY\",\n              \"VET\",\n              \"CUS\"\n            ]\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\\n- KLP (Keyless padlock)\\n- BLT (Bolt)\\n- WIR (Wire)\\n\",\n            \"enum\": [\n              \"KLP\",\n              \"BLT\",\n              \"WIR\"\n            ]\n          }\n        }\n      }\n    }\n  }\n}",
			"type": "string"
		},
		{
			"key": "TNT_TRANSPORT_EVENTS_PAYLOAD_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"description\": \"The business attributes related to the `TransportEvent`.\\n\",\n  \"required\": [\n    \"eventClassifierCode\",\n    \"eventDateTime\",\n    \"transportCall\",\n    \"transportEventTypeCode\"\n  ],\n  \"properties\": {\n    \"eventClassifierCode\": {\n      \"type\": \"string\",\n      \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n      \"enum\": [\n        \"ACT\",\n        \"PLN\",\n        \"EST\"\n      ]\n    },\n    \"eventDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n    },\n    \"transportEventTypeCode\": {\n      \"type\": \"string\",\n      \"description\": \"Identifier for type of `transportEvent`\\n- ARRI (Arrived)\\n- DEPA (Departed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\\\">GitHub</a>\\n\",\n      \"enum\": [\n        \"ARRI\",\n        \"DEPA\"\n      ]\n    },\n    \"delayReasonCode\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.\\n\"\n    },\n    \"changeRemark\": {\n      \"maxLength\": 250,\n      \"type\": \"string\",\n      \"description\": \"Free text field to provide information as to why the `TransportEvent` was sent\\n\"\n    },\n    \"transportCall\": {\n      \"required\": [\n        \"modeOfTransport\",\n        \"transportCallReference\"\n      ],\n      \"type\": \"object\",\n      \"properties\": {\n        \"transportCallReference\": {\n          \"maxLength\": 100,\n          \"type\": \"string\",\n          \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n        },\n        \"transportCallSequenceNumber\": {\n          \"type\": \"integer\",\n          \"description\": \"Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\\n\"\n        },\n        \"modeOfTransport\": {\n          \"type\": \"string\",\n          \"description\": \"The mode of transport as defined by DCSA.\\n\",\n          \"enum\": [\n            \"VESSEL\",\n            \"RAIL\",\n            \"TRUCK\",\n            \"BARGE\"\n          ]\n        },\n        \"location\": {\n          \"description\": \"General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n          \"anyOf\": [\n            {\n              \"required\": [\n                \"facilityCode\",\n                \"facilityCodeListProvider\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                },\n                \"facilityCode\": {\n                  \"maxLength\": 6,\n                  \"type\": \"string\",\n                  \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                },\n                \"facilityCodeListProvider\": {\n                  \"type\": \"string\",\n                  \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                  \"enum\": [\n                    \"BIC\",\n                    \"SMDG\"\n                  ]\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"UNLocationCode\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"address\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using an `Address` object\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"address\": {\n                  \"description\": \"Address related information\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Name of the address\"\n                    },\n                    \"street\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                    },\n                    \"streetNumber\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                    },\n                    \"floor\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The floor of the partyÔÇÖs street number.\"\n                    },\n                    \"postCode\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The post code of the partyÔÇÖs address.\"\n                    },\n                    \"city\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The city name of the partyÔÇÖs address.\"\n                    },\n                    \"stateRegion\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The state/region of the partyÔÇÖs address.\"\n                    },\n                    \"country\": {\n                      \"maxLength\": 75,\n                      \"type\": \"string\",\n                      \"description\": \"The country of the partyÔÇÖs address.\"\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    },\n    \"relatedDocumentReferences\": {\n      \"type\": \"array\",\n      \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n            \"enum\": [\n              \"CBR\",\n              \"BKG\",\n              \"SHI\",\n              \"TRD\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The reference to the object described by `type`\\n\"\n          }\n        }\n      }\n    },\n    \"references\": {\n      \"required\": [\n        \"type\",\n        \"value\"\n      ],\n      \"type\": \"array\",\n      \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n            \"enum\": [\n              \"FF\",\n              \"SI\",\n              \"PO\",\n              \"CR\",\n              \"AAO\",\n              \"ECR\",\n              \"CSI\",\n              \"BPR\",\n              \"BID\",\n              \"EQ\",\n              \"RUC\",\n              \"DUE\",\n              \"CER\",\n              \"AES\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The actual value of the reference.\"\n          }\n        }\n      }\n    }\n  }\n}",
			"type": "string"
		},
		{
			"key": "TNT_ONE_OF_TRANPORT_EQUIPMENT_EVENTS_PAYLOAD_SCHEMA",
			"value": "{\n  \"description\": \"This is a conditional object - if `retractedEventID` is **not** provided in the `metadata` then this `payload` object is mandatory\\n\",\n  \"oneOf\": [\n    {\n      \"type\": \"object\",\n      \"description\": \"The business attributes related to the `EquipmentEvent`.\\n\",\n      \"required\": [\n        \"emptyIndicatorCode\",\n        \"equipmentEventTypeCode\",\n        \"eventClassifierCode\",\n        \"eventDateTime\"\n      ],\n      \"properties\": {\n        \"eventClassifierCode\": {\n          \"type\": \"string\",\n          \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n          \"enum\": [\n            \"ACT\",\n            \"PLN\",\n            \"EST\"\n          ]\n        },\n        \"eventDateTime\": {\n          \"type\": \"string\",\n          \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n        },\n        \"equipmentEventTypeCode\": {\n          \"type\": \"string\",\n          \"description\": \"Unique identifier for `equipmentEventTypeCode` - can be one of the following values\\n- LOAD (Loaded)\\n- DISC (Discharged)\\n- GTIN (Gated in)\\n- GTOT (Gated out)\\n- STUF (Stuffed)\\n- STRP (Stripped)\\n- PICK (Pick-up)\\n- AVPU (Available for Pick-up)\\n- DROP (Drop-off)\\n- AVDO (Available for Drop-off)\\n- INSP (Inspected)\\n- RSEA (Resealed)\\n- RMVD (Removed)\\n- CUSS (Customs Selected for Scan)\\n- CUSI (Customs Selected for Inspection)\\n- CUSR (Customs Released)\\n- CROS (Crossed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\\\">GitHub</a>\\n\",\n          \"enum\": [\n            \"LOAD\",\n            \"DISC\",\n            \"GTIN\",\n            \"GTOT\",\n            \"STUF\",\n            \"STRP\",\n            \"AVPU\",\n            \"PICK\",\n            \"AVDO\",\n            \"DROP\",\n            \"INSP\",\n            \"RSEA\",\n            \"RMVD\",\n            \"CUSS\",\n            \"CUSI\",\n            \"CUSR\",\n            \"CROS\"\n          ]\n        },\n        \"equipmentReference\": {\n          \"maxLength\": 15,\n          \"type\": \"string\",\n          \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n        },\n        \"ISOEquipmentCode\": {\n          \"maxLength\": 4,\n          \"type\": \"string\",\n          \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n        },\n        \"emptyIndicatorCode\": {\n          \"type\": \"string\",\n          \"description\": \"Code to denote whether the equipment is empty or laden.\",\n          \"enum\": [\n            \"EMPTY\",\n            \"LADEN\"\n          ]\n        },\n        \"isTransshipmentMove\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates whether this event is originated in relation to an ocean transshipment or inter terminal move. `isTransshipmentMove` can be set to true in combination with one of the following `equipmentEventTypeCodes`:\\n\\n- `LOAD` (Load)\\n- `DISC` (Discharge)\\n- `GTIN` (Gate In)\\n- `GTOT` (Gate Out)\\n- `PICK` (Pick-up)\\n- `DROP` (Drop-off)\\n\"\n        },\n        \"eventLocation\": {\n          \"description\": \"General purpose object to capture the location in the `EquipmentEvent` whenever it is **not** associated with a `TransportCall` (this could be stuffing and stripping). The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n          \"anyOf\": [\n            {\n              \"required\": [\n                \"facilityCode\",\n                \"facilityCodeListProvider\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                },\n                \"facilityCode\": {\n                  \"maxLength\": 6,\n                  \"type\": \"string\",\n                  \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                },\n                \"facilityCodeListProvider\": {\n                  \"type\": \"string\",\n                  \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                  \"enum\": [\n                    \"BIC\",\n                    \"SMDG\"\n                  ]\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"UNLocationCode\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"address\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using an `Address` object\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"address\": {\n                  \"description\": \"Address related information\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Name of the address\"\n                    },\n                    \"street\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                    },\n                    \"streetNumber\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                    },\n                    \"floor\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The floor of the partyÔÇÖs street number.\"\n                    },\n                    \"postCode\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The post code of the partyÔÇÖs address.\"\n                    },\n                    \"city\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The city name of the partyÔÇÖs address.\"\n                    },\n                    \"stateRegion\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The state/region of the partyÔÇÖs address.\"\n                    },\n                    \"country\": {\n                      \"maxLength\": 75,\n                      \"type\": \"string\",\n                      \"description\": \"The country of the partyÔÇÖs address.\"\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        },\n        \"transportCall\": {\n          \"required\": [\n            \"modeOfTransport\",\n            \"transportCallReference\"\n          ],\n          \"type\": \"object\",\n          \"properties\": {\n            \"transportCallReference\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n            },\n            \"transportCallSequenceNumber\": {\n              \"type\": \"integer\",\n              \"description\": \"Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\\n\"\n            },\n            \"modeOfTransport\": {\n              \"type\": \"string\",\n              \"description\": \"The mode of transport as defined by DCSA.\\n\",\n              \"enum\": [\n                \"VESSEL\",\n                \"RAIL\",\n                \"TRUCK\",\n                \"BARGE\"\n              ]\n            },\n            \"location\": {\n              \"description\": \"General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n              \"anyOf\": [\n                {\n                  \"required\": [\n                    \"facilityCode\",\n                    \"facilityCodeListProvider\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                  \"properties\": {\n                    \"locationName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the location.\"\n                    },\n                    \"UNLocationCode\": {\n                      \"maxLength\": 5,\n                      \"type\": \"string\",\n                      \"description\": \"The UN Location code specifying where the place is located.\"\n                    },\n                    \"facilityCode\": {\n                      \"maxLength\": 6,\n                      \"type\": \"string\",\n                      \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                    },\n                    \"facilityCodeListProvider\": {\n                      \"type\": \"string\",\n                      \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                      \"enum\": [\n                        \"BIC\",\n                        \"SMDG\"\n                      ]\n                    }\n                  }\n                },\n                {\n                  \"required\": [\n                    \"UNLocationCode\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                  \"properties\": {\n                    \"locationName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the location.\"\n                    },\n                    \"UNLocationCode\": {\n                      \"maxLength\": 5,\n                      \"type\": \"string\",\n                      \"description\": \"The UN Location code specifying where the place is located.\"\n                    }\n                  }\n                },\n                {\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                  \"properties\": {\n                    \"locationName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the location.\"\n                    },\n                    \"address\": {\n                      \"description\": \"Address related information\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"name\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"Name of the address\"\n                        },\n                        \"street\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                        },\n                        \"streetNumber\": {\n                          \"maxLength\": 50,\n                          \"type\": \"string\",\n                          \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                        },\n                        \"floor\": {\n                          \"maxLength\": 50,\n                          \"type\": \"string\",\n                          \"description\": \"The floor of the partyÔÇÖs street number.\"\n                        },\n                        \"postCode\": {\n                          \"maxLength\": 50,\n                          \"type\": \"string\",\n                          \"description\": \"The post code of the partyÔÇÖs address.\"\n                        },\n                        \"city\": {\n                          \"maxLength\": 65,\n                          \"type\": \"string\",\n                          \"description\": \"The city name of the partyÔÇÖs address.\"\n                        },\n                        \"stateRegion\": {\n                          \"maxLength\": 65,\n                          \"type\": \"string\",\n                          \"description\": \"The state/region of the partyÔÇÖs address.\"\n                        },\n                        \"country\": {\n                          \"maxLength\": 75,\n                          \"type\": \"string\",\n                          \"description\": \"The country of the partyÔÇÖs address.\"\n                        }\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        },\n        \"facilityTypeCode\": {\n          \"type\": \"string\",\n          \"description\": \"The code to identify the specific type of facility. The code indicates which role the facility plays if this `EquipmentEvent` is related to *stuffing*/*stipping* (in case the event does not have a `transportCall`). Possible values\\n- BORD (Border)\\n- CLOC (Customer location)\\n- COFS (Container freight station)\\n- OFFD (Off dock storage)\\n- DEPO (Depot)\\n- INTE (Inland terminal)\\n- POTE (Port terminal)\\n- RAMP (Ramp)\\n- WAYP (Waypoint)\\n\",\n          \"enum\": [\n            \"BORD\",\n            \"CLOC\",\n            \"COFS\",\n            \"OFFD\",\n            \"DEPO\",\n            \"INTE\",\n            \"POTE\",\n            \"RAMP\",\n            \"WAYP\"\n          ]\n        },\n        \"relatedDocumentReferences\": {\n          \"type\": \"array\",\n          \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n                \"enum\": [\n                  \"CBR\",\n                  \"BKG\",\n                  \"SHI\",\n                  \"TRD\"\n                ]\n              },\n              \"value\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The reference to the object described by `type`\\n\"\n              }\n            }\n          }\n        },\n        \"references\": {\n          \"required\": [\n            \"type\",\n            \"value\"\n          ],\n          \"type\": \"array\",\n          \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n                \"enum\": [\n                  \"FF\",\n                  \"SI\",\n                  \"PO\",\n                  \"CR\",\n                  \"AAO\",\n                  \"ECR\",\n                  \"CSI\",\n                  \"BPR\",\n                  \"BID\",\n                  \"EQ\",\n                  \"RUC\",\n                  \"DUE\",\n                  \"CER\",\n                  \"AES\"\n                ]\n              },\n              \"value\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The actual value of the reference.\"\n              }\n            }\n          }\n        },\n        \"seals\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"required\": [\n              \"number\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.\",\n            \"properties\": {\n              \"number\": {\n                \"maxLength\": 15,\n                \"type\": \"string\",\n                \"description\": \"Identifies a seal affixed to the container.\"\n              },\n              \"source\": {\n                \"type\": \"string\",\n                \"description\": \"The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\\n- CAR (Carrier)\\n- SHI (Shipper)\\n- PHY (Phytosanitary)\\n- VET (Veterinary)\\n- CUS (Customs)\\n\",\n                \"enum\": [\n                  \"CAR\",\n                  \"SHI\",\n                  \"PHY\",\n                  \"VET\",\n                  \"CUS\"\n                ]\n              },\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\\n- KLP (Keyless padlock)\\n- BLT (Bolt)\\n- WIR (Wire)\\n\",\n                \"enum\": [\n                  \"KLP\",\n                  \"BLT\",\n                  \"WIR\"\n                ]\n              }\n            }\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"description\": \"The business attributes related to the `TransportEvent`.\\n\",\n      \"required\": [\n        \"eventClassifierCode\",\n        \"eventDateTime\",\n        \"transportCall\",\n        \"transportEventTypeCode\"\n      ],\n      \"properties\": {\n        \"eventClassifierCode\": {\n          \"type\": \"string\",\n          \"description\": \"Code for the event classifier. Values can vary depending on eventType\\n\",\n          \"enum\": [\n            \"ACT\",\n            \"PLN\",\n            \"EST\"\n          ]\n        },\n        \"eventDateTime\": {\n          \"type\": \"string\",\n          \"description\": \"The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\\n\"\n        },\n        \"transportEventTypeCode\": {\n          \"type\": \"string\",\n          \"description\": \"Identifier for type of `transportEvent`\\n- ARRI (Arrived)\\n- DEPA (Departed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\\\">GitHub</a>\\n\",\n          \"enum\": [\n            \"ARRI\",\n            \"DEPA\"\n          ]\n        },\n        \"delayReasonCode\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.\\n\"\n        },\n        \"changeRemark\": {\n          \"maxLength\": 250,\n          \"type\": \"string\",\n          \"description\": \"Free text field to provide information as to why the `TransportEvent` was sent\\n\"\n        },\n        \"transportCall\": {\n          \"required\": [\n            \"modeOfTransport\",\n            \"transportCallReference\"\n          ],\n          \"type\": \"object\",\n          \"properties\": {\n            \"transportCallReference\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n            },\n            \"transportCallSequenceNumber\": {\n              \"type\": \"integer\",\n              \"description\": \"Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.\\n\"\n            },\n            \"modeOfTransport\": {\n              \"type\": \"string\",\n              \"description\": \"The mode of transport as defined by DCSA.\\n\",\n              \"enum\": [\n                \"VESSEL\",\n                \"RAIL\",\n                \"TRUCK\",\n                \"BARGE\"\n              ]\n            },\n            \"location\": {\n              \"description\": \"General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\",\n              \"anyOf\": [\n                {\n                  \"required\": [\n                    \"facilityCode\",\n                    \"facilityCodeListProvider\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                  \"properties\": {\n                    \"locationName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the location.\"\n                    },\n                    \"UNLocationCode\": {\n                      \"maxLength\": 5,\n                      \"type\": \"string\",\n                      \"description\": \"The UN Location code specifying where the place is located.\"\n                    },\n                    \"facilityCode\": {\n                      \"maxLength\": 6,\n                      \"type\": \"string\",\n                      \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                    },\n                    \"facilityCodeListProvider\": {\n                      \"type\": \"string\",\n                      \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                      \"enum\": [\n                        \"BIC\",\n                        \"SMDG\"\n                      ]\n                    }\n                  }\n                },\n                {\n                  \"required\": [\n                    \"UNLocationCode\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                  \"properties\": {\n                    \"locationName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the location.\"\n                    },\n                    \"UNLocationCode\": {\n                      \"maxLength\": 5,\n                      \"type\": \"string\",\n                      \"description\": \"The UN Location code specifying where the place is located.\"\n                    }\n                  }\n                },\n                {\n                  \"required\": [\n                    \"address\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                  \"properties\": {\n                    \"locationName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the location.\"\n                    },\n                    \"address\": {\n                      \"description\": \"Address related information\",\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"name\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"Name of the address\"\n                        },\n                        \"street\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                        },\n                        \"streetNumber\": {\n                          \"maxLength\": 50,\n                          \"type\": \"string\",\n                          \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                        },\n                        \"floor\": {\n                          \"maxLength\": 50,\n                          \"type\": \"string\",\n                          \"description\": \"The floor of the partyÔÇÖs street number.\"\n                        },\n                        \"postCode\": {\n                          \"maxLength\": 50,\n                          \"type\": \"string\",\n                          \"description\": \"The post code of the partyÔÇÖs address.\"\n                        },\n                        \"city\": {\n                          \"maxLength\": 65,\n                          \"type\": \"string\",\n                          \"description\": \"The city name of the partyÔÇÖs address.\"\n                        },\n                        \"stateRegion\": {\n                          \"maxLength\": 65,\n                          \"type\": \"string\",\n                          \"description\": \"The state/region of the partyÔÇÖs address.\"\n                        },\n                        \"country\": {\n                          \"maxLength\": 75,\n                          \"type\": \"string\",\n                          \"description\": \"The country of the partyÔÇÖs address.\"\n                        }\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        },\n        \"relatedDocumentReferences\": {\n          \"type\": \"array\",\n          \"description\": \"An optional list of key-value (`type`-`value`) pairs representing links to objects relevant to the event. The `type`-field is used to describe where the `value`-field is pointing to.\\n\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"Describes where the `value` is pointing to. Can be one of the following values\\n- CBR (Carrier Booking Request Reference)\\n- BKG (Carrier Booking Reference)\\n- SHI (Shipping Instruction Reference)\\n- TRD (Transport Document Reference)\\n\",\n                \"enum\": [\n                  \"CBR\",\n                  \"BKG\",\n                  \"SHI\",\n                  \"TRD\"\n                ]\n              },\n              \"value\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The reference to the object described by `type`\\n\"\n              }\n            }\n          }\n        },\n        \"references\": {\n          \"required\": [\n            \"type\",\n            \"value\"\n          ],\n          \"type\": \"array\",\n          \"description\": \"References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\\nIn addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `type` called `EQ` which is a reference to an Equipment.\\n\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- EQ (Equipment Reference)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>.\\n\",\n                \"enum\": [\n                  \"FF\",\n                  \"SI\",\n                  \"PO\",\n                  \"CR\",\n                  \"AAO\",\n                  \"ECR\",\n                  \"CSI\",\n                  \"BPR\",\n                  \"BID\",\n                  \"EQ\",\n                  \"RUC\",\n                  \"DUE\",\n                  \"CER\",\n                  \"AES\"\n                ]\n              },\n              \"value\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The actual value of the reference.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  ]\n}",
			"type": "string"
		},
		{
			"key": "EVENT_SUBSCRIPTION_SCHEMA",
			"value": "{\n    \"type\": \"object\",\n    \"required\": [\n      \"callbackUrl\"\n    ],\n    \"properties\": {\n      \"subscriptionID\": {\n        \"type\": \"string\",\n        \"description\": \"The carrier issues a unique ID to the shipper or consignee for that subscription\\n\"\n      },\n      \"subscriptionCreatedDateTime\": {\n        \"type\": \"string\",\n        \"description\": \"The date and time when the subscription was created\\n\"\n      },\n      \"subscriptionUpdatedDateTime\": {\n        \"type\": \"string\",\n        \"description\": \"The date and time when the subscription was last updated\\n\"\n      },\n      \"callbackUrl\": {\n        \"type\": \"string\",\n        \"description\": \"The endPoint where a Carrier whould send back events to the Shipper. The callback can contain query parameters uniquely identifying the originator of the events.\\n\"\n      },\n      \"eventTypes\": {\n        \"type\": \"array\",\n        \"description\": \"List of `eventType` to filter by. If multiple values are selected - the **OR**-operator will be used.\\n\\nPossible values are\\n- SHIPMENT (Shipment events)\\n- TRANSPORT (Transport events)\\n- EQUIPMENT (Equipment events)\\n\\nDefault is none as it will not filter on `eventType` if not specified.\\n\",\n        \"items\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"SHIPMENT\",\n            \"TRANSPORT\",\n            \"EQUIPMENT\"\n          ]\n        }\n      },\n      \"shipmentEventTypeCodes\": {\n        \"type\": \"array\",\n        \"description\": \"List of `shipmentEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\\n\\nDefault is none as it will not filter on `shipmentEventTypeCode` if not specified.\\n\",\n        \"items\": {\n          \"type\": \"string\",\n          \"description\": \"The status of the document in the process. Possible values are\\n- RECE (Received)\\n- DRFT (Drafted)\\n- PENA (Pending Approval)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- SUBM (Submitted)\\n- VOID (Void)\\n- REQS (Requested)\\n- CMPL (Completed)\\n- HOLD (On Hold)\\n- RELS (Released)\\n- CANC (Cancelled)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv)\\n\",\n          \"enum\": [\n            \"RECE\",\n            \"DRFT\",\n            \"PENA\",\n            \"PENU\",\n            \"PENC\",\n            \"CONF\",\n            \"REJE\",\n            \"APPR\",\n            \"ISSU\",\n            \"SURR\",\n            \"SUBM\",\n            \"VOID\",\n            \"REQS\",\n            \"CMPL\",\n            \"HOLD\",\n            \"RELS\",\n            \"CANC\"\n          ]\n        }\n      },\n      \"documentTypeCodes\": {\n        \"type\": \"array\",\n        \"description\": \"List of `documentTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\\n\\nDefault is none as it will not filter on `documentTypeCode` if not specified.\\n\",\n        \"items\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"The `documentTypeCode` is used to identify the type of information `documentReference` points to. Can be one of the following values\\n- CBR (Carrier Booking Request)\\n- BKG (Booking)\\n- SHI (Shipping Instruction)\\n- TRD (Transport Document)\\n- DEI (Delivery Instructions)\\n- DEO (Delivery Order)\\n- TRO (Transport Order)\\n- CRO (Container Release Order)\\n- ARN (Arrival Notice)\\n- VGM (Verified Gross Mass)\\n- CAS (Cargo Survey)\\n- CUC (Customs Clearance)\\n- DGD (Dangerous Goods Declaration)\\n- OOG (Out of Gauge)\\n- CQU (Contract Quotation)\\n- INV (Invoice)\\n- HCE (Health Certificate)\\n- PCE (Phytosanitary Certificate)\\n- VCE (Veterinary Certificate)\\n- FCE (Fumigation Certificate)\\n- ICE (Inspection Certificate)\\n- CEA (Certificate of Analysis)\\n- CEO (Certificate of Origin)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv)\\n\",\n          \"enum\": [\n            \"CBR\",\n            \"BKG\",\n            \"SHI\",\n            \"TRD\",\n            \"DEI\",\n            \"DEO\",\n            \"TRO\",\n            \"CRO\",\n            \"ARN\",\n            \"VGM\",\n            \"CAS\",\n            \"CUC\",\n            \"DGD\",\n            \"OOG\",\n            \"CQU\",\n            \"INV\",\n            \"HCE\",\n            \"PCE\",\n            \"VCE\",\n            \"FCE\",\n            \"ICE\",\n            \"CEA\",\n            \"CEO\"\n          ]\n        }\n      },\n      \"documentReference\": {\n        \"maxLength\": 100,\n        \"type\": \"string\",\n        \"description\": \"The reference of the object defined by the `documentTypeCode`\\n\"\n      },\n      \"equipmentReference\": {\n        \"maxLength\": 15,\n        \"type\": \"string\",\n        \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n      },\n      \"transportEventTypeCodes\": {\n        \"type\": \"array\",\n        \"description\": \"List of `transportEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\\n\\nDefault is none as it will not filter on `transportEventTypeCode` if not specified.\\n\",\n        \"items\": {\n          \"type\": \"string\",\n          \"description\": \"Identifier for type of `transportEvent`\\n- ARRI (Arrived)\\n- DEPA (Departed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\\\">GitHub</a>\\n\",\n          \"enum\": [\n            \"ARRI\",\n            \"DEPA\"\n          ]\n        }\n      },\n      \"transportCallReference\": {\n        \"maxLength\": 100,\n        \"type\": \"string\",\n        \"description\": \"A carrier definied reference to a TransportCall.\\n\\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port`/`Terminal` - this reference should be considered a **Terminal Call Reference**\\n\"\n      },\n      \"vesselIMONumber\": {\n        \"maxLength\": 7,\n        \"type\": \"string\",\n        \"description\": \"The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\\n\"\n      },\n      \"carrierExportVoyageNumber\": {\n        \"maxLength\": 50,\n        \"type\": \"string\",\n        \"description\": \"The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage.\\n\"\n      },\n      \"universalExportVoyageReference\": {\n        \"pattern\": \"\\\\d{2}[0-9A-Z]{2}[NEWS]\",\n        \"type\": \"string\",\n        \"description\": \"A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\\\d{2}[0-9A-Z]{2}[NEWS]`\\n- `2 digits` for the year\\n- `2 alphanumeric characters` for the sequence number of the voyage\\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).\\n\"\n      },\n      \"carrierServiceCode\": {\n        \"maxLength\": 11,\n        \"type\": \"string\",\n        \"description\": \"The Carrier specific code of the service for which the schedule details are published.\\n\"\n      },\n      \"universalServiceReference\": {\n        \"maxLength\": 8,\n        \"pattern\": \"SR\\\\d{5}[A-Z]\",\n        \"type\": \"string\",\n        \"description\": \"A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\\\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.\\n\"\n      },\n      \"UNLocationCode\": {\n        \"maxLength\": 5,\n        \"type\": \"string\",\n        \"description\": \"The UN Location code specifying where the place is located.\"\n      },\n      \"equipmentEventTypeCodes\": {\n        \"type\": \"array\",\n        \"description\": \"List of `equipmentEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\\n\\nDefault is none as it will not filter on `equipmentEventTypeCode` if not specified.\\n\",\n        \"items\": {\n          \"type\": \"string\",\n          \"description\": \"Unique identifier for `equipmentEventTypeCode` - can be one of the following values\\n- LOAD (Loaded)\\n- DISC (Discharged)\\n- GTIN (Gated in)\\n- GTOT (Gated out)\\n- STUF (Stuffed)\\n- STRP (Stripped)\\n- PICK (Pick-up)\\n- AVPU (Available for Pick-up)\\n- DROP (Drop-off)\\n- AVDO (Available for Drop-off)\\n- INSP (Inspected)\\n- RSEA (Resealed)\\n- RMVD (Removed)\\n- CUSS (Customs Selected for Scan)\\n- CUSI (Customs Selected for Inspection)\\n- CUSR (Customs Released)\\n- CROS (Crossed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\\\">GitHub</a>\\n\",\n          \"enum\": [\n            \"LOAD\",\n            \"DISC\",\n            \"GTIN\",\n            \"GTOT\",\n            \"STUF\",\n            \"STRP\",\n            \"AVPU\",\n            \"PICK\",\n            \"AVDO\",\n            \"DROP\",\n            \"INSP\",\n            \"RSEA\",\n            \"RMVD\",\n            \"CUSS\",\n            \"CUSI\",\n            \"CUSR\",\n            \"CROS\"\n          ]\n        }\n      }\n    }\n  }",
			"type": "string"
		}
	]
}
